<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Data Storage(I)</title>
    <url>/2023/01/18/2023-01-17-Data%20Storage(I)/</url>
    <content><![CDATA[<h1 id="data-storagei">Data Storage(I)</h1>
<h2 id="binary-world">Binary world</h2>
<ul>
<li>Simple, logical and unambiguous</li>
<li>Boolen operation and gates
<ol type="1">
<li>AND: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/f40BHRy.png"></li>
<li>OR: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/iHu0uCp.png"></li>
<li>Exclusive OR(XOR): <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/Kt4lWeG.png"></li>
<li>NOT: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/naddbwe.png"></li>
</ol></li>
</ul>
<h2 id="flip-flop正反器">Flip-Flop(正反器)</h2>
<ul>
<li>Purpose -&gt; To store 0/1</li>
<li>2 inputs</li>
<li>One -&gt; set 0</li>
<li>The other -&gt; set 1</li>
<li>It will preserve 0/1 if there is no inputs</li>
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/CM0A35v.png">
<ul>
<li><p>Simple SR Flip-Flop Circuit <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/UxaHn8a.png"></p></li>
<li><p>Another Simple SR Flip-Flop Circuit <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/eHtGv2l.png"></p></li>
</ul></li>
</ul>
<h2 id="hexadecimalhex十六進位">Hexadecimal(Hex，十六進位)</h2>
<ul>
<li>Reason of using Hex
<ol type="1">
<li>Binary is too long for human to remember</li>
<li>Binary to Hex is straightforward</li>
</ol></li>
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/4SckAD3.png"></li>
</ul>
<h2 id="main-memory-cell">Main memory cell</h2>
<ul>
<li>8 bits -&gt; 1 cell -&gt; 1 byte</li>
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/0tHCICX.png"></li>
</ul>
<h2 id="memory">Memory</h2>
<ul>
<li>One dimensional</li>
<li>Random accessible</li>
<li>Access the content via the address</li>
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/848KpU9.png"></li>
</ul>
<h2 id="memory-techniques">Memory techniques</h2>
<ul>
<li>Random access memory (Ram): Memory in which individual cells can be
easily randomly accessed.
<ol type="1">
<li>Type: Static Memory(SRAM), Dynamic Memory(DRAM), Synchronous
DRAM(SDRAM)</li>
<li>Double Date Rate(DDR)-&gt;Faster when reading data</li>
<li>Dual/Triple channel</li>
</ol></li>
<li><ol type="1">
<li>Kilobyte: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1290.1 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span> = 1024 bytes
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.081ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="0.968ex" role="img" focusable="false" viewBox="0 -464 778 428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2243" d="M55 283Q55 356 103 409T217 463Q262 463 297 447T395 382Q431 355 446 344T493 320T554 307H558Q613 307 652 344T694 433Q694 464 708 464T722 432Q722 356 673 304T564 251H554Q510 251 465 275T387 329T310 382T223 407H219Q164 407 122 367Q91 333 85 295T76 253T69 250Q55 250 55 283ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.003ex" role="img" focusable="false" viewBox="0 -863.3 1436.6 885.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g></svg></mjx-container></span> bytes</li>
<li>Megabyte: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1290.1 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span> = 1038576
bytes <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.081ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="0.968ex" role="img" focusable="false" viewBox="0 -464 778 428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2243" d="M55 283Q55 356 103 409T217 463Q262 463 297 447T395 382Q431 355 446 344T493 320T554 307H558Q613 307 652 344T694 433Q694 464 708 464T722 432Q722 356 673 304T564 251H554Q510 251 465 275T387 329T310 382T223 407H219Q164 407 122 367Q91 333 85 295T76 253T69 250Q55 250 55 283ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></g></svg></mjx-container></span> bytes</li>
<li>Gigabyte: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1290.1 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span> = 1073741824
bytes <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.081ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="0.968ex" role="img" focusable="false" viewBox="0 -464 778 428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2243" d="M55 283Q55 356 103 409T217 463Q262 463 297 447T395 382Q431 355 446 344T493 320T554 307H558Q613 307 652 344T694 433Q694 464 708 464T722 432Q722 356 673 304T564 251H554Q510 251 465 275T387 329T310 382T223 407H219Q164 407 122 367Q91 333 85 295T76 253T69 250Q55 250 55 283ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></g></g></svg></mjx-container></span> bytes</li>
<li>Gigabyte: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.904ex" role="img" focusable="false" viewBox="0 -841.7 1290.1 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span> = 1073741824
bytes <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.081ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="0.968ex" role="img" focusable="false" viewBox="0 -464 778 428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2243" d="M55 283Q55 356 103 409T217 463Q262 463 297 447T395 382Q431 355 446 344T493 320T554 307H558Q613 307 652 344T694 433Q694 464 708 464T722 432Q722 356 673 304T564 251H554Q510 251 465 275T387 329T310 382T223 407H219Q164 407 122 367Q91 333 85 295T76 253T69 250Q55 250 55 283ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.05ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1790.1 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span> bytes</li>
</ol></li>
</ul>
<h2 id="mass-storage">Mass Storage</h2>
<ul>
<li>Properties:
<ol type="1">
<li>Larger capacity</li>
<li>Less volatility</li>
<li>Slower</li>
<li>On-line or off-line</li>
</ol></li>
<li>Types:
<ol type="1">
<li>Magnetic systems(HDD，Floppy Disk)</li>
<li>Optical systems(CD，DVD)</li>
<li>Flash drives(SSD)</li>
</ol></li>
<li>Magnetic storage:
<ol type="1">
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/FaS4kFn.png"></li>
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/Blqj4wl.png"></li>
<li>Access time = seek time(To reach the right track) + rotation
delay(latency time，To reahc the right sector)</li>
<li>Transfer rate(SATA)</li>
</ol></li>
<li>Optical storage
<ol type="1">
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/4CxHApt.png"></li>
</ol></li>
<li>Physical and logical records
<ol type="1">
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/dUAwIy8.png"></li>
</ol></li>
<li>Buffer(緩衝區)
<ol type="1">
<li>Purpose: To synchronize different read/write mechanisms and
rates</li>
<li>An area used to temporarily store data</li>
</ol></li>
</ul>
<h2 id="representing-text">Representing text</h2>
<ul>
<li>ASCII: 7 bits (or 8 bits starts with 0)</li>
<li>Unicode: 16 bits</li>
<li>ISO: 32 bits</li>
</ul>
<h2 id="representing-numbers">Representing numbers</h2>
<ul>
<li><p>901 (decimal): <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/gUkyMRy.png"></p></li>
<li><p>11 (binary): <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/yCSMAtg.png"></p></li>
<li><p>From binary to decimal <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/77twv7u.png"></p></li>
<li><p>From decimal to binary <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/CxpuQ3J.png"></p></li>
</ul>
<h2 id="representing-img">Representing img</h2>
<ul>
<li>Bit map techniques:
<ol type="1">
<li>Pixel: the element of a picture</li>
<li>Colors: RGB，HSV，etc.</li>
</ol></li>
<li>Vector techniques:
<ol type="1">
<li>Properties: Scalable</li>
<li>Truetype，Postscript，SVG(scalable vector graphic)</li>
</ol></li>
</ul>
<h2 id="representing-sound">Representing sound</h2>
<ul>
<li>Sampling
<ol type="1">
<li>Sample rate and bit resolution</li>
<li>Bit rate(sampling rate <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span>
bit resolution)</li>
</ol></li>
<li>MIDI(synthesis)
<ol type="1">
<li>A protocol designed for recording and playing back music on digital
synthesizers that is supported by many makes of personal computer sound
cards</li>
</ol></li>
</ul>
<h2 id="binary-system-revisited">Binary system revisited</h2>
<ul>
<li>Addition
<ol type="1">
<li>0+0=0</li>
<li>1+0=1，0+1=1</li>
<li>1+1=10</li>
</ol></li>
<li>Subtraction
<ol type="1">
<li>Define negative numbers first(Two's Complement Notation)</li>
</ol></li>
</ul>
<h2 id="twos-complement-notation-and-encoding">Two's complement notation
and encoding</h2>
<ul>
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/SisdfNh.png"></li>
<li>Encoding(method 1): <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/yCIZs08.png">
After finishing the process，you can directly do the addition and get
the right answer</li>
<li>Encoding(method 2): Do it as usual binary way<img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/qHhHYH7.png"></li>
<li>Encoding(method 3): <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/35BXAa6.png"></li>
</ul>
<h2 id="excess-notation">Excess notation</h2>
<ul>
<li><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/3cyVdYJ.png"></li>
<li>Addition: After the calculation, u have to add 4 to get the right
answer ## Overflow Using the table from Two's complement:</li>
<li>Occurs when the result is out of range(not in table)</li>
<li>Addition of two positive numbers -&gt; 2+3=5 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.081ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="0.968ex" role="img" focusable="false" viewBox="0 -464 778 428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g></g></g></svg></mjx-container></span> -3(mod 8)</li>
<li>Addition of two negative numbers -&gt; (-2)+(-3)=-5 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.081ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="0.968ex" role="img" focusable="false" viewBox="0 -464 778 428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g></g></g></svg></mjx-container></span> -3(mod 8)</li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Storage(II)</title>
    <url>/2023/01/18/2023-01-17-Data%20Storage(II)/</url>
    <content><![CDATA[<h1 id="data-storageii">Data Storage(II)</h1>
<h2 id="fraction-in-binary">Fraction in binary</h2>
<ul>
<li>The rules is the same <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/pqwL1v6.png"></li>
</ul>
<h2 id="float-point-notation-and-decoding">Float-point notation and
decoding</h2>
<ol type="1">
<li>8 bits representation<img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/6YrHIlt.png"><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/BDVrmtA.png">
<ul>
<li>Ex (Use the table of binary): 10010101 =&gt; 1(001)(0101) =&gt;
(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="3.879ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 1714.6 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>)<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span>(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>+<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="2.595ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 1147.1 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(396.8,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><rect width="907.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>)=-<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></li>
</ul></li>
<li>On the widely used 64-bit computers，the exponent takes 11 bits，and
the mantissa takes 52 bits</li>
</ol>
<h2 id="truncation-error">Truncation error</h2>
<ol type="1">
<li>The precision is beyond the limitation of mantissa.
<ul>
<li>Ex (Use the table of binary): 2<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> -&gt; 10.101(base two，fixed
point) =&gt; .10101 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 936.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container></span> =&gt; 0(010)(1010) =&gt; 2<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> ## Normalized form</li>
</ul></li>
<li><ul>
<li>The first bit of mantissa is 1</li>
<li>0's floating-point representation is all 0</li>
</ul></li>
<li>Normalization:
<ul>
<li>Ex (Use the table of binary): 00100011 =&gt; 0(010)(0011) =&gt;
.0011 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 936.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container></span> =&gt; .1100 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 936.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></g></svg></mjx-container></span> =&gt; 0(000)(1100)</li>
</ul></li>
<li>IEEE normalized form
<ul>
<li>The left-most bit in mantissa is always 1 (Ex: .0101 -&gt;
1.0101)</li>
<li>Standard normalized form is (s)(eee)(mmmm) =&gt; (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="3.829ex" height="1.714ex" role="img" focusable="false" viewBox="0 -675.5 1692.6 757.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></g></g></svg></mjx-container></span>) <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span> 1.mmmm <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="6.845ex" height="2.021ex" role="img" focusable="false" viewBox="0 -893.3 3025.3 893.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(855,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1321,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1787,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2565,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(3065,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container></span>
<ul>
<li>Ex(Use the table of binary): 01100011 =&gt; (0)(110)(0011) =&gt;
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.639ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2492.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1167,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(1667,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span> 1.0011 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="5.408ex" height="2.021ex" role="img" focusable="false" viewBox="0 -893.3 2390.4 893.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2167,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container></span></li>
</ul></li>
</ul></li>
</ol>
<h2 id="loss-of-digits">Loss of digits</h2>
<p>Ex (Use the table of excess):</p>
<ul>
<li>4 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = (01111000 + 00111000) +
00111000 -&gt; make the exponent the same (01111000 + 01110000) +
01110000 = 4 (the result is wrong)</li>
<li>4 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = 01111000 + (00111000 +
00111000) = 4<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></li>
</ul>
<h2 id="data-compression">Data compression</h2>
<ul>
<li>Two types =&gt; Lossy and Lossless</li>
<li>Lossless
<ol type="1">
<li>Run-length encoding(RLE)
<ul>
<li>After the process of compressing ，wwwwwww is being recognized as
7w<br>
</li>
</ul></li>
<li>Frequency-dependent encoding =&gt; Huffman encoding</li>
<li>Dictionary encoding =&gt; Adaptive dictionary encoding, LZW encoding
<ul>
<li>Defining the value by yourself</li>
</ul></li>
</ol></li>
<li>Lossy
<ol type="1">
<li>Relative / difference encoding</li>
</ol></li>
<li>Huffman encoding
<ul>
<li>Ex: AAABBBAABCAAAABD
<ul>
<li>Traditional encoding =&gt; Code book: A =&gt; 00; B =&gt; 01; C
=&gt; 10; D =&gt; 11, represent in 2 bits it will be
000000010101000001100000000111</li>
<li>Huffman encoding =&gt;
<ol type="1">
<li>Count the occurrences: A(9); B(5); C(1); D(1)</li>
<li>Build a huffman tree: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/nWxGAT7.png"></li>
</ol>
According to the tree, the code book is A =&gt; 0, B =&gt; 10, C =&gt;
110, D =&gt; 111. Through the huffman encoding，the string will be
transfered into 0001010100010110</li>
</ul></li>
</ul></li>
<li>LZW encoding
<ul>
<li>Is a kind of dictionary encoding that does not need to store the
dictionary</li>
<li>The concept is to generate more values to the dictionary(Usually we
use the ascii code to represent numbers and words, so no addition
dictionary is needed)
<ul>
<li><p>Code book: x =&gt; 1, y &gt; 2, space =&gt; 3</p>
<ul>
<li>Ex: xyx xyx xyx xyx</li>
</ul>
<p>=&gt; 1</p>
<p>=&gt; 12</p>
<p>=&gt; 121</p>
<p>=&gt; 1213</p>
<p>Then you append 1213 to the dictionary as 4</p>
<p>=&gt; 12134 =&gt; 121343434</p></li>
</ul></li>
</ul></li>
</ul>
<h2 id="images-audios-and-videos">Images, audios and videos</h2>
<ul>
<li>Images:
<ol type="1">
<li>GIF: 256 colors, dictionary encoding</li>
<li>JPEG: Lossy / lossless encoding</li>
</ol></li>
<li>Audios:
<ol type="1">
<li>MP3: Lossy encoding</li>
</ol></li>
<li>Videos:
<ol type="1">
<li>MPEG: Lossy encoding</li>
</ol></li>
</ul>
<h2 id="communication-errors">Communication errors</h2>
<ul>
<li>The reason of compressing data is to remove redundency</li>
<li>To correct the communication error =&gt; we add redundancy</li>
<li>Error detection =&gt; instead of correcting errors, it can only
check if the errors occurs
<ul>
<li>Applications(detection):
<ol type="1">
<li>ID numbers</li>
<li>ISBN</li>
<li>Parity code</li>
</ol></li>
</ul></li>
<li>Error correcting =&gt; Can correct errors to some degree</li>
</ul>
<h2 id="application-of-error-detections-corrections">Application of
error detections / corrections</h2>
<ul>
<li>Taiwan ID:<img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/GrBxbtA.png">
<ol type="1">
<li>Convert the first English letter into a number(xy): <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/MzCD1dk.png"></li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.164ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 956.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></span> = x + 9y</li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.164ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 956.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="5.173ex" height="2.922ex" role="img" focusable="false" viewBox="0 -948 2286.6 1291.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mn" transform="translate(1089,477.1) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> i <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.937ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 856 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> = 1 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></span> + 2 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span> ... +8 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.372ex" role="img" focusable="false" viewBox="0 -441 965.6 606.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container></span></li>
<li>Check code =&gt; <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.372ex" role="img" focusable="false" viewBox="0 -441 965.6 606.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></g></svg></mjx-container></span> = 10 -
((<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.164ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 956.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.164ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 956.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>) mod 10)</li>
</ol></li>
<li>ISBN-10 ISBN　template: 0-273-75139
<ol type="1">
<li>Compute S = 0 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 10 + 2
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 9 +7 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 8 + 3 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 7 + 7 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 6 + 5 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 5 + 1 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 4 + 3 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 3 + 9 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g></g></g></svg></mjx-container></span> 2 = 193</li>
<li>M = S mod 11 = 6</li>
<li>N = 11 - M =5
<ul>
<li>If N = 10 the check code is X</li>
<li>If N = 11 the check code is 0</li>
<li>Otherwise, the check code is the number N</li>
</ul></li>
<li>The ISBN code 0-273-75139-5
<ul>
<li>Parity Bits
<ol type="1">
<li>Making the quantity of 1s odd <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/gaBDWYj.png"></li>
<li>The technique is used in communication and RAID</li>
</ol></li>
</ul></li>
</ol></li>
<li>An error-correcting code(ECC)
<ol type="1">
<li>(3, 1) repetition code (can correct 1-bit errors) -&gt; seperate the
data into groups with 1 bit in each group, and add two bits to
authenticate the data <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/SOldZpS.png"></li>
</ol></li>
<li>Hamming distance
<ol type="1">
<li>Comparing two binary data， hamming distance is the amount of
different bits.</li>
</ol></li>
<li>Error correction with hamming distance
<ol type="1">
<li>Maximizing hamming distance along the symbols
<ul>
<li>Sample code book: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/qvBxx5o.png"></li>
</ul>
Ex: received 010100 * Hammig distance:<br>
<img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/43W6zqv.png"> According to the chart, we
will correct 010100 to 011100(D)</li>
</ol></li>
<li>Generating (7, 4)Hamming code <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/3ugdiSq.png"></li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Manipulation(I)</title>
    <url>/2023/01/18/2023-01-17-Data%20Manipulation(I)/</url>
    <content><![CDATA[<h1 id="data-manipulationi">Data Manipulation(I)</h1>
<h2 id="the-communication-between-cpu-and-memory">The communication
between CPU and memory</h2>
<p>Register -&gt; CPU Cache</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/sEBH2IU.png"></p>
<ul>
<li>Adding values in memory
<ol type="1">
<li>Get value A from the memory and put it in a register.</li>
<li>Get value B from the memory and put it in another register.</li>
<li>Activate the additional circuit and put the final value into another
register.</li>
<li>Store the result the memory.</li>
</ol></li>
<li>Machine instruction
<ol type="1">
<li>Data transfer
<ul>
<li>load, store, I/O</li>
</ul></li>
<li>Arithmetic/logic
<ul>
<li>and, or, add, sub...</li>
<li>shift, halt</li>
</ul></li>
<li>Control
<ul>
<li>jump, halt</li>
</ul></li>
<li>RISC -&gt; Reduced instruction set computing
<ul>
<li>Ex: PRC, SPRC</li>
</ul></li>
<li>CISC -&gt; Complex instruction set computing
<ul>
<li>Ex: x86，x64</li>
</ul></li>
</ol></li>
</ul>
<h2 id="example-of-machine-instruction">Example of machine
instruction</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/UYGKbh0.png"></p>
<ul>
<li>3 -&gt; store</li>
<li>5 -&gt; register No.5</li>
<li>A7 -&gt; memory cell A7</li>
<li>all in all -&gt; Store the content of register No.5 to memory cell
A7.</li>
</ul>
<h2 id="the-machine-instruction-of-adding-two-values">The machine
instruction of adding two values</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/Xa7EtHE.png"></p>
<h2 id="program-execution">Program execution</h2>
<ul>
<li><p>Machine cycle <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/N1Jiuk9.png"></p></li>
<li><p>Fetch <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/pJF8QS9.png"></p></li>
<li><p>Clock -&gt; how many machine cycle a cpu is able to do in one
second</p></li>
</ul>
<h2 id="arithmetic-and-logic-unitalu">Arithmetic and logic
unit(ALU)</h2>
<ul>
<li>Arithmetic operations</li>
<li>Logic/bit operations</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/pfBxlEH.png"></p>
<h2 id="shiftrotation">Shift/Rotation</h2>
<ul>
<li>Logic shift
<ul>
<li>10100000 -&gt; 01010000(right)</li>
<li>10100000 -&gt; 01000000(left)</li>
<li>Both moving left and right add a 0</li>
</ul></li>
<li>Arithmetic shift
<ul>
<li><p>10100000 -&gt; 11010000(right, the number is divided by 2) Moving
right，copy the leftest bit.</p></li>
<li><p>10100000 -&gt; 11000000(left, the number is multiplied by 2)
Moving left，add a 0 to the right.</p></li>
</ul></li>
<li>Rotation
<ul>
<li>10100000 -&gt; 01010000(right)</li>
<li>10100000 -&gt; 01000001(left)</li>
</ul></li>
</ul>
<h2 id="controllers-and-peripheral-devices">Controllers and peripheral
devices</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/AZ4fwQH.png"></p>
<ul>
<li>Specialized -&gt; SATA...</li>
<li>General -&gt; USB, HDMI...</li>
</ul>
<h2 id="memory-mapped-io">Memory-mapped I/O</h2>
<ul>
<li>The periphral devices are recognized as part of the memory. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/YFL6td3.png"></li>
</ul>
<h2 id="communication">Communication</h2>
<ul>
<li>DMA(direct memory access)
<ul>
<li>Authorized controllers can access data directly from main memory
without notifying CPU</li>
</ul></li>
<li>Hand shaking
<ul>
<li>Two way communication</li>
<li>Coordinating activities</li>
</ul></li>
<li>Parallel/Serial</li>
<li>Transfer rate unit -&gt; bit per second</li>
</ul>
<h2 id="pipeliningaccelerating-the-process">Pipelining(accelerating the
process)</h2>
<p>ex -&gt; pre-fetching</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/gPsrUkp.png"></p>
<ul>
<li>Throughput -&gt; Total amount of work accomplished in a given amount
of time</li>
<li>Pre-fetching issus -&gt; conditional jump</li>
</ul>
<h2 id="paralleldistributed-computing">Parallel/distributed
computing</h2>
<ul>
<li>Parallel
<ul>
<li>Multiprocessor</li>
<li>MIMD，SISD，SIMD，MISD(M-&gt;Multiple，S-&gt;Single，I-&gt;Instruction,
D-&gt;Dataset)</li>
</ul></li>
<li>Distributed
<ul>
<li>Linking computers via network</li>
<li>Seperate processors and memory</li>
</ul></li>
<li>Issues
<ul>
<li>Data dependency</li>
<li>Load balancing</li>
<li>Synchronization</li>
<li>Reliability</li>
</ul></li>
</ul>
<h2 id="how-to-parallelize">How to parallelize?</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/xrTQCOL.png"></p>
<h2 id="speed-up-and-scaling">Speed up and Scaling</h2>
<ul>
<li>Amdahl's law(阿姆達爾定律)</li>
<li>Gain = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.593ex;" xmlns="http://www.w3.org/2000/svg" width="8.624ex" height="3.55ex" role="img" focusable="false" viewBox="0 -864.9 3811.6 1569"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(1729,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-460.1) scale(0.707)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(326.1,394) scale(0.707)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><rect width="943.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(1961.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2350.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2850.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3628.2,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(4379.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="3571.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> (P -&gt;
proportion that is parallelizable, S -&gt; proportion that is serial
only)</li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System(I)</title>
    <url>/2023/01/18/2023-01-17-Operating%20System(I)/</url>
    <content><![CDATA[<h1 id="operating-systemi">Operating System(I)</h1>
<h2 id="batch-processingearly-era">Batch processing(early era)</h2>
<ul>
<li>The process of computer operators entering data to the computers and
give the result back to you. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/mVRCkv6.png"></li>
</ul>
<h2 id="interactive-processingearly-era">Interactive processing(early
era)</h2>
<ul>
<li>OS with remote terminals <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/Kovmajm.png"></li>
<li>Types of operating system Reference: <a class="link" href="http://www.chwa.com.tw/TResource/VS/book1/ch3/3-2.htm">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>
<ul>
<li>Batch(批次)</li>
<li>Interactive</li>
<li>Real-time
<ul>
<li>Response time is critical.</li>
</ul></li>
<li>Time-sharing and multitasking
<ul>
<li>Dividing time into intervals.</li>
<li>Only one task is being performed at any given time.</li>
</ul></li>
<li>Multiprocessor
<ul>
<li>Load balancing</li>
<li>Scaling</li>
</ul></li>
</ul></li>
<li>Software classification <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/WyObhvz.png"></li>
<li>Shells
<ul>
<li>Communication with users
<ul>
<li>Text based</li>
<li>GUI(Graphical user interface )</li>
</ul></li>
</ul></li>
</ul>
<h2 id="kernel">Kernel</h2>
<ul>
<li>File manager
<ul>
<li>Directory/folder path</li>
</ul></li>
<li>Device drivers</li>
<li>Memory manager
<ul>
<li>Allocating main memory</li>
<li>Paging, virtual memory<br>
</li>
</ul></li>
<li>Schedular
<ul>
<li>The component which selects process to execute.</li>
</ul></li>
<li>Dispatcher
<ul>
<li>The component which gives control of CPU to execute the process
selected by Schedular.</li>
</ul></li>
</ul>
<h2 id="linux">Linux</h2>
<ul>
<li>Made by Linus Torvalds</li>
<li>Freeware and open-source</li>
<li>Many distribution (Ex: Ubuntu，Kali)</li>
<li>Linux only means the kernel</li>
</ul>
<h2 id="how-is-os-being-loaded">How is OS being loaded?</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/2CzC6fw.png"></p>
<ul>
<li>BIOS(Basic Input/Output Sytem)is usually stored on a EEPEROM
chip(Electrically-Erasable Programable Read-Only Memory)</li>
</ul>
<h2 id="process">Process</h2>
<ul>
<li>The activity of executing a program</li>
<li>Process state
<ul>
<li>Program counter</li>
<li>General purpose registers</li>
<li>Associated memory cells</li>
</ul></li>
<li>Process table
<ul>
<li>Memory area assigned to the process</li>
<li>Priority</li>
<li>Ready/waiting(One process for each core)</li>
</ul></li>
</ul>
<h2 id="process-administration">Process Administration</h2>
<ul>
<li>Schedular
<ul>
<li>Use: Maintaining the process table</li>
<li>Introducing new process</li>
<li>Removing completed process</li>
<li>Deciding whether a process is ready or waiting</li>
</ul></li>
<li>Dispatcher <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/ae6Hv5z.png">
<ul>
<li>Use: Getting the process to running state.</li>
<li>Controling the allocation of time to the process in the process
table.</li>
<li>Process switch(interrupt) <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/vvtyj1e.png"> Multiprogramming between two
processes.</li>
</ul></li>
</ul>
<h2 id="semaphores">Semaphores</h2>
<ul>
<li>Meaning of semaphore: A visual sinaling appratus with flags,
lights...</li>
<li>Test-and-set: Uninterruptible process, it will change the status of
false to true and return it.</li>
<li>Critical region(臨界區段): A region that is only accessible to a
program.
<ul>
<li>Mutual exclusion(互斥鎖): A process that prevents simultaneous
access to a shared resource.</li>
</ul></li>
</ul>
<h2 id="prerequisites-for-deadlock">Prerequisites for Deadlock</h2>
<ul>
<li>Deadlock may occur only if all three of the following
conditions(necessary but insufficient) are satisfied
<ol type="1">
<li>Competition for non-shareable resources</li>
<li>Resources are requested on a partial basis, receiving some resources
and return later to request more.</li>
<li>Once a resource has been allocated, it cannot be forcibly retrieved.
<img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/LWgDTY9.png"></li>
</ol></li>
<li>To prevent Deadlock from happening, we have to avoid the conditions
mentioned above being satisfied.</li>
</ul>
<h2 id="the-consequence-of-preventing-deadlock-from-happening">The
Consequence of Preventing Deadlock from Happening</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/HxCTDOU.png"></p>
<ul>
<li>Starvation: Process cannot get the resources needed for a long time
because the resources keep being allocated to other processes.</li>
<li>The solution to starvation -&gt; (Aging): Adding an aging factor to
the priority of each request.</li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Networking and the Internet(I)</title>
    <url>/2023/01/18/2023-01-17-Networking%20and%20the%20internet(I)/</url>
    <content><![CDATA[<h1 id="networking-and-the-interneti">Networking and the
Internet(I)</h1>
<h2 id="network-classifications">Network Classifications</h2>
<ul>
<li>Scope
<ul>
<li>LAN: Local area network.</li>
<li>MAN: Metropolitan area network.</li>
<li>WAN: Wide area network.</li>
</ul></li>
<li>Ownership
<ul>
<li>Closed</li>
<li>Opened</li>
</ul></li>
<li>Topology (拓樸學)
<ul>
<li>Bus: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/1QUPg2e.png"></li>
<li>Ring: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/bWnGTBf.png"></li>
<li>Star: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/EWTkIgx.png"></li>
</ul></li>
</ul>
<h2 id="protocols">Protocols</h2>
<ul>
<li>Token Ring
<ul>
<li>Popular in ring topology.</li>
<li>Token and messages are passed in one direction.</li>
<li>Only the machine which gets the token can transmit its message.</li>
</ul></li>
<li>CSMA/CD (Carrier sense, mutiple access with collision detection)
<ul>
<li>Popular in bus topology.</li>
<li>Broadcasting.</li>
<li>When collision, both machines wait for a random time before trying
again.</li>
</ul></li>
<li>CSMA/CA (Carrier sense, mutiple access with collision avoidence)
<ul>
<li>Popular in wireless Ethernet.</li>
<li>Broadcasting.</li>
<li>Detect if a channel is idle, if so, wait for a random time and then
detect again. If the channel is still idle, then start sending.</li>
</ul></li>
</ul>
<h2 id="wireless-and-access-pointap">Wireless and Access Point(AP)</h2>
<ul>
<li>Wi-Fi(wireless fidelity)</li>
<li>IEEE 802.11-Standard for wireless network(b, g, i, n, ac...) <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/MOBFzwQ.png"></li>
</ul>
<h2 id="repeaterbridgeswitchcompatible-networks">Repeater，Bridge，Switch(Compatible
Networks)</h2>
<p>Reference: <a class="link" href="https://notfalse.net/66/repeater-hub-bridge-switch">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>The protocol between these devices have to be the same.</li>
<li>Repeater(Amplifier)
<ul>
<li>Passing through messages.</li>
<li>Connecting two compatible networks <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/0t1ZGPW.png"></li>
</ul></li>
<li>Bridge
<ul>
<li>Only passing those messages addressed to the other side.</li>
<li>Connecting two compatible networks more efficiently. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/QEsDF9x.png"></li>
</ul></li>
<li>Switch(Multiple Bridge)
<ul>
<li>A bridge with multiple connections.</li>
<li>Connecting mutiple compatible networks efficiently. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/uwwGpYy.png"></li>
</ul></li>
</ul>
<h2 id="routerincompatible-networks">Router(Incompatible Networks)</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/rJmNTSf.png"></p>
<ul>
<li>Router
<ul>
<li>Building a network of networks.(The protocol can be different)</li>
<li>Most come with firewall management.</li>
</ul></li>
</ul>
<h2 id="interprocess-communication">Interprocess Communication</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/6pWclWl.png"></p>
<ul>
<li>Server-Client
<ul>
<li>One server, several clients.</li>
<li>Clients initiate communications by sending requests.</li>
</ul></li>
<li>P2P(Peer-to-Peer)
<ul>
<li>Two processes communicating as equals.</li>
<li>The most popular distribution mode nowadays.</li>
</ul></li>
</ul>
<h2 id="distributed-systems">Distributed Systems</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/ZmowcOK.png"></p>
<ul>
<li>Infrastructure can be provided by standardized toolkits.
<ul>
<li>Ex: Java Beans，.NET framework.</li>
</ul></li>
</ul>
<h2 id="internet-architecture">Internet Architecture</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/rB8IPMk.png"></p>
<ul>
<li>Domain
<ul>
<li>A network or an internet controlled by one single authority.</li>
</ul></li>
<li>ICANN(Internmet corporation for assigned names and numbers)
<ul>
<li>Supervise the registration of doimains</li>
</ul></li>
<li>Gateway
<ul>
<li>A router that connects a domain to the rest of the Internet.</li>
</ul></li>
</ul>
<h2 id="internet-composition">Internet Composition</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/3reTfwk.png"></p>
<ul>
<li>Internet Service Provider(ISP)
<ul>
<li>Allow customer to connect their domain to the ISP's equiment or join
the domain already established by the ISP.</li>
</ul></li>
</ul>
<h2 id="ip-addresses">IP Addresses</h2>
<ul>
<li>IP(internet protocol)address
<ul>
<li>IPv4 -&gt; 32bits(all are allocated already)</li>
<li>IPv6 -&gt; 128bits</li>
</ul></li>
</ul>
<h2 id="name-server-vs-domain-server">Name Server vs Domain Server</h2>
<ul>
<li>Name server:
<ul>
<li>Name servers organize and route traffic across the internet to get
you to the right server.</li>
</ul></li>
<li>Domain Name Server(DNS)
<ul>
<li>A server that provide you with server information. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/rYtlfru.png"></li>
</ul></li>
</ul>
<h2 id="internet-application">Internet Application</h2>
<ul>
<li>VoIP(Voice over Internet protocol)</li>
<li>email(electronic mail)</li>
<li>FTP(file transfer protocol)</li>
<li>telnet and ssh(secure shell)</li>
<li>P2P</li>
</ul>
<h2 id="browsers">Browsers</h2>
<ul>
<li>HTTP(Hyper text transfer protocol)</li>
<li>URL(uniform resource locator)</li>
<li>How a browser get access to a webpage(document): <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/hY3bIGo.png"></li>
</ul>
<h2 id="client-side-and-server-side">Client-side and Server-side</h2>
<ul>
<li>Client-side(The program is executed on one's pc)
<ul>
<li>Java applets</li>
<li>Javascript</li>
<li>Flash</li>
</ul></li>
<li>Server-side(The program is executed on the server)
<ul>
<li>CGI</li>
<li>Servlets</li>
<li>PHP</li>
</ul></li>
<li>Online game use both techniques.</li>
</ul>
<h2 id="internet-protocol">Internet Protocol</h2>
<p>Reference: <a class="link" href="https://ithelp.ithome.com.tw/articles/10259569?sc=pt">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>Layers
<ul>
<li>OSI Model
<ul>
<li>Reference: [link](https://en.wikipedia.org/wiki/OSI_model&gt; <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/e5dfV9e.png"></li>
</ul></li>
<li>TCP/IP Model
<ul>
<li>Application: constructs message into packets.</li>
<li>Transport: chops message into packages.</li>
<li>Network: handles routing through the Internet.</li>
<li>Link handles actual transmission of packets. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/0gNoMlv.png"></li>
</ul></li>
</ul></li>
<li>Port
<ul>
<li>Incoming messages are delivered to different applications by unique
port numbers. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/54gXvXI.png"></li>
</ul></li>
</ul>
<h2 id="tcpip">TCP/IP</h2>
<ul>
<li>TCP and UDP(Transport Layer)
<ul>
<li>TCP(transmission control protocol):handshake berfore sending
packets. =&gt; slow but reliable.</li>
<li>UDP(user datagram protocol): directly sending packets. =&gt; fast
but not reliable.</li>
</ul></li>
<li>IP(NEtwork Layer)
<ul>
<li>routing based on IP(IPv4, IPv6)</li>
</ul></li>
<li>TCP and IP are two protocols. TCP/IP is a collection of protocols
more than just TCP and IP.</li>
</ul>
<h2 id="security">Security</h2>
<ul>
<li><p>Attacks</p>
<ul>
<li>Malware</li>
<li>Denial of Service(Dos)</li>
<li>Spam</li>
</ul></li>
<li><p>Protections</p>
<ul>
<li>Firewall</li>
<li>Spam filter</li>
<li>Proxy</li>
<li>Antivirus, antispyware</li>
</ul></li>
<li><p>Public/Private Keys System Reference: <a class="link" href="https://medium.com/@RiverChan/%E5%9F%BA%E7%A4%8E%E5%AF%86%E7%A2%BC%E5%AD%B8-%E5%B0%8D%E7%A8%B1%E5%BC%8F%E8%88%87%E9%9D%9E%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-de25fd5fa537">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>SSL(Secure Scoket Layer)
<ul>
<li>Application: sftp, https, ssh</li>
</ul></li>
<li>To prevent fishing, a certificate authority is needed, to ensure to
correctivity of a key. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/fnACCIR.png"></li>
</ul></li>
</ul>
<h2 id="rsa-algorithm">RSA Algorithm</h2>
<p>Reference: <a class="link" href="https://ithelp.ithome.com.tw/articles/10250721">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>Generation <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/5SMoi2J.png"></li>
<li>Encryption <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/WTvEm7R.png"></li>
<li>Decryption <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/6fnmG7A.png"></li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Chaper 7 Pointers</title>
    <url>/2023/01/18/Chaper%207%20Pointers/</url>
    <content><![CDATA[<h1 id="chaper-7-pointers">Chaper 7 Pointers</h1>
<h2 id="what-is-pointers">What is Pointers?</h2>
<ul>
<li>Declaration: int <em>pointer_name;/char </em>pointer_name;</li>
<li>Data being stored inside a pointer is the address(unsigned int: hex)
of a data in the memory.</li>
<li>Pointer shoud be initialized. A pointer with null or the value 0 is
called null pointer.(0 is the only integer that can be assigned to a
pointer variable) ex: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/4izPqBi.jpg"></li>
</ul>
<h2 id="how-to-assign-the-address-of-a-data-to-pointers">How to assign
the address of a data to pointers?</h2>
<ul>
<li>"*" and "&amp;" are inverses of one another. ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> *pointer;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">	pointer=&amp;a;</span><br><span class="line">	cout&lt;&lt;pointer&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//cout the address of a.</span></span><br><span class="line">	cout&lt;&lt;*pointer&lt;&lt;<span class="string">"\n"</span>;cout&lt;&lt;the value of a.</span><br><span class="line">	cout&lt;&lt;*&amp;a; <span class="comment">//cout the value of a.</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="the-relations-between-pointers-and-data">The relations between
pointers and data</h2>
<ul>
<li>alter a &lt;=&gt; alter the value of *pointer.</li>
<li>The address won't be changed.</li>
</ul>
<p>ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> *pointer;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">	pointer=&amp;a;</span><br><span class="line">	cout&lt;&lt;pointer&lt;&lt;<span class="string">" "</span>&lt;&lt;*pointer&lt;&lt;<span class="string">" "</span>&lt;&lt;a&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	*pointer=<span class="number">100</span>;</span><br><span class="line">	cout&lt;&lt;pointer&lt;&lt;<span class="string">" "</span>&lt;&lt;*pointer&lt;&lt;<span class="string">" "</span>&lt;&lt;a&lt;&lt;<span class="string">" \n"</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p>
<h2 id="passbyreference-with-pointers">PassByReference with
Pointers</h2>
<p>ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cube</span><span class="params">(<span class="type">int</span> *pointer)</span></span>{</span><br><span class="line">	*pointer= *pointer * *pointer * *pointer;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> length;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;length){</span><br><span class="line">		<span class="built_in">cube</span>(&amp;length);</span><br><span class="line">		cout&lt;&lt;length&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p>
<h2 id="const-and-pointers">Const and Pointers</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>* pointer1=&amp;num; <span class="comment">//The number pointer1 points to is a const.</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> pointer2=&amp;num; <span class="comment">//pointer is a const.</span></span><br></pre></td></tr></table></figure></div>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/VwXzdCt.png"> * For pointer1: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/WnGwjyZ.png"> * For pointer2: <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/AsWthKE.png"></p>
<p>ex(For pointer1): <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span>* pointer;</span><br><span class="line">	pointer=&amp;a;</span><br><span class="line">	cout&lt;&lt;*pointer&lt;&lt;<span class="string">"\n"</span>;	<span class="comment">//cout 10</span></span><br><span class="line">	a=<span class="number">100</span>;</span><br><span class="line">	cout&lt;&lt;*pointer&lt;&lt;<span class="string">"\n"</span>;	<span class="comment">//cout 100</span></span><br><span class="line">	<span class="comment">/*pointer=100;*/</span> <span class="comment">//not allowed</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p>
<p>ex(For pointer2):</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>, b=<span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span>* <span class="type">const</span> pointer=&amp;a;</span><br><span class="line">	*pointer=<span class="number">1000</span>;</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="comment">/*pointer=&amp;b*/</span> <span class="comment">//not allowed</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="pointers-and-array">Pointers and Array</h2>
<ul>
<li><p>int array and pointers <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> a[<span class="number">5</span>]={<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>};</span><br><span class="line">	<span class="type">int</span> *pointer=a;	<span class="comment">//a is the address of a[0]</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++){</span><br><span class="line">		cout&lt;&lt;*(a+i)&lt;&lt;<span class="string">" "</span>; <span class="comment">//cout 0~4</span></span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++){</span><br><span class="line">		*(a+i)=<span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++){</span><br><span class="line">		cout&lt;&lt;*(a+i)&lt;&lt;<span class="string">" "</span>; <span class="comment">//cout 0</span></span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&amp;a[<span class="number">4</span>]-pointer;	<span class="comment">//4 the distance(elements) between a[4] and pointer(a[0]). = 2*sizeof(int)</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p></li>
<li><p>char array and pointers <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">char</span> a[<span class="number">18</span>]=<span class="string">"Helloworld"</span>;</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//it won't cout the address of a[0]</span></span><br><span class="line">	cout&lt;&lt;a+<span class="number">5</span>&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//it will cout world</span></span><br><span class="line">	cout&lt;&lt;*(a+<span class="number">9</span>)&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//equals to a[10];</span></span><br><span class="line">	cout&lt;&lt;(<span class="type">void</span>*)a&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//it will cout the address of a[0](H)</span></span><br><span class="line">	cout&lt;&lt;(<span class="type">void</span>*)a+<span class="number">9</span>&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//it will cout the address of a[9](d)</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p></li>
<li><p>c-string and pointers</p></li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/6smBRIe.png"></p>
<ul>
<li>sizeof()
<ul>
<li>sizeof() with array or value will return the total size in
bytes.</li>
</ul></li>
</ul>
<p>Ex1(with array):</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>]={<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>};</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(arr)&lt;&lt;<span class="string">"\n"</span>;  <span class="comment">//cout the total size of the array(bytes)</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]); <span class="comment">//cout the total amount of elements in arr.    </span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>Ex2(with value):</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">double</span> a=<span class="number">10.5</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(a+b); <span class="comment">//return 8 since the result of int and double addition is still double </span></span><br><span class="line">}    </span><br></pre></td></tr></table></figure></div>
<p>Ex3(with c-string):</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">char</span> string[<span class="number">11</span>]=<span class="string">"Helloworld"</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(string);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li>void* =&gt; a pointer for any genre of data type.
<ul>
<li>Before using it, the type of pointer must be determined.</li>
</ul></li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">void</span>* pointer;</span><br><span class="line">    pointer=&amp;a;</span><br><span class="line">    cout&lt;&lt;pointer&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//cout the address </span></span><br><span class="line">    cout&lt;&lt;*(<span class="type">int</span>*)pointer&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//cout the number a correctly</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Use pointers to print a 2d array</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_array</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> rows, <span class="type">int</span> columns)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;rows; i++){</span><br><span class="line">        a=a+i*columns;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;columns; j++){</span><br><span class="line">            cout&lt;&lt;*(a+j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        }</span><br><span class="line">        cout&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]={{<span class="number">0</span>, <span class="number">1</span>}, {<span class="number">2</span>, <span class="number">3</span>}};</span><br><span class="line">    <span class="built_in">print_array</span>(&amp;a[<span class="number">0</span>][<span class="number">0</span>], <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Pointers for 2D array</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/c4qeaq4.png"></p>
<ul>
<li>Pointers for 3D array</li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/Q9zlaWs.png"></p>
<ul>
<li><p>Arrays of Pointers</p>
<ul>
<li>The array stores the address of the first character in each
c-string.</li>
</ul>
<p>Ex1:</p>
<p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> suit[ <span class="number">4</span> ] =</span><br><span class="line">{ <span class="string">"Hearts"</span>, <span class="string">"Diamonds"</span>,</span><br><span class="line"><span class="string">"Clubs"</span>, <span class="string">"Spades"</span> };</span><br></pre></td></tr></table></figure></div></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/V5lQGvy.png"> Ex2:</p>
<p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">char</span> *suit[<span class="number">2</span>]={<span class="string">"Hello"</span>, <span class="string">"World"</span>}; <span class="comment">//stores the address of the first character in each string</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">sizeof</span>(suit)/<span class="number">8</span>; i++){</span><br><span class="line">        cout&lt;&lt;suit[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">}    </span><br></pre></td></tr></table></figure></div></p></li>
</ul>
<h2 id="functions-pointer">Function's Pointer</h2>
<ul>
<li>Pass the pointer of a function to another fucntion</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>{</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selection_sort</span><span class="params">(vector &lt;<span class="type">int</span>&gt; &amp;v, <span class="type">void</span> (*swap)(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b))</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>()<span class="number">-1</span>; i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;v.<span class="built_in">size</span>(); j++){</span><br><span class="line">            <span class="keyword">if</span>(v[j]&lt;v[i]){</span><br><span class="line">                <span class="built_in">swap</span>(v[j], v[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++){</span><br><span class="line">        cout&lt;&lt;v[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    vector &lt;<span class="type">int</span>&gt; test={<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">10</span>};</span><br><span class="line">    <span class="built_in">selection_sort</span>(test, swap);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="selection-sort">Selection sort</h2>
<p>Reference(How it works):https://www.geeksforgeeks.org/selection-sort/
* Easy to program but inefficient. Ex:</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_double</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>{</span><br><span class="line">	<span class="type">double</span> temp=a;</span><br><span class="line">	a=b;</span><br><span class="line">	b=temp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;vec)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vec.<span class="built_in">size</span>()<span class="number">-1</span>; i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;vec.<span class="built_in">size</span>(); j++){</span><br><span class="line">            <span class="keyword">if</span>(vec[j]&lt;vec[i]){</span><br><span class="line">                <span class="built_in">swap_double</span>(vec[j], vec[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; test={<span class="number">0</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>};</span><br><span class="line">    <span class="built_in">sort</span>(test);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;test.<span class="built_in">size</span>(); i++){</span><br><span class="line">        cout&lt;&lt;test[i]&lt;&lt;<span class="string">" "</span>;    </span><br><span class="line">    }</span><br><span class="line">}  </span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to C++ Programing</title>
    <url>/2023/01/18/Chaper%208%20Sequential-Access%20Files/</url>
    <content><![CDATA[<h1 id="chaper-8-sequential-access-files">Chaper 8 Sequential-Access
Files</h1>
<h2 id="fstream">fstream</h2>
<ul>
<li>ofstream and ifstream is include in fstream
<ul>
<li>ofstream: creats and writes files</li>
<li>ifstream: reads from files</li>
</ul></li>
</ul>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/BXqxxcS.png"> Ex1(Input data to txt):
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    fstream file;</span><br><span class="line">    file.<span class="built_in">open</span>(<span class="string">"test.txt"</span>, ios::out);</span><br><span class="line">    string name, birthday;</span><br><span class="line">    <span class="keyword">if</span>(!file){</span><br><span class="line">        cerr&lt;&lt;<span class="string">"File could not be open."</span>&lt;&lt;endl; </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);    <span class="comment">//exit with error</span></span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;<span class="string">"Input the name and birthday(input end-of-file to end the program):"</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;name&gt;&gt;birthday){</span><br><span class="line">        outClientFile&lt;&lt;name&lt;&lt;<span class="string">' '</span>&lt;&lt;birthday&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">"Input the name and birthday(input end-of-file to end the program):"</span>;</span><br><span class="line">    }</span><br><span class="line">    outClientFile.<span class="built_in">close</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> Ex2(Read from txt): <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="function">fstream <span class="title">file</span><span class="params">(<span class="string">"test.txt"</span>, ios::in)</span></span>;</span><br><span class="line">    string name, birthday;</span><br><span class="line">    <span class="keyword">if</span>(!file){</span><br><span class="line">        cerr&lt;&lt;<span class="string">"The file cannot be opened."</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(file&gt;&gt;name&gt;&gt;birthday){</span><br><span class="line">        cout&lt;&lt;name&lt;&lt;<span class="string">" "</span>&lt;&lt;birthday&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">    outClientFile.<span class="built_in">close</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> * Reading from a
specific line(seekg(), seekp())
Reference:　http://c.biancheng.net/view/1541.html</p>
<pre><code>* name.seekg(0); =&gt; reposition the pointer to location 0.
* To read a sequential file again, we need to add name.clear() before the seekg.</code></pre>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/8Ourtup.png"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/QbXSudS.png"> * Telling you the
current location(tellg(), tellp())</p>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to C++ Programing</title>
    <url>/2023/01/18/Chapter%202,%20Introduction%20to%20C++%20Programing/</url>
    <content><![CDATA[<h1 id="chapter-2-introduction-to-c-programing">Chapter 2, Introduction
to C++ Programing</h1>
<h2 id="the-sturcture-of-basic-c-program">The Sturcture of Basic C++
Program</h2>
<ul>
<li>The lines start with # are processed by the preprocessor.</li>
<li>&lt;iostream&gt; is the input/output stream header file.</li>
<li>The int main() means that the main program will return an integar
value.</li>
<li>std::cout specifies that we are using namspace std.</li>
</ul>
<h2 id="the-use-of-escape-sequence">The Use of Escape Sequence</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/G8kcne8.png"></p>
<h2 id="the-declaration-of-variables">The Declaration of Variables</h2>
<ul>
<li><p>void =&gt; Function does not return a value.</p></li>
<li><p>int =&gt; Declare integar variables.</p></li>
<li><p>char =&gt; Declare character variables.</p>
<ul>
<li>char can also be stored as integer.</li>
</ul></li>
<li><p>float =&gt; Declare floating-point variables.</p></li>
<li><p>double =&gt; Declare double-precision variables.</p></li>
<li><p>bool =&gt; To hold a boolean value, true/false. ## Arithmetic
Operators <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/IhflKJP.png"></p></li>
<li><p>The rules of operator precedence as generally same as those in
algebra.</p></li>
<li><p>Exponentiation -&gt; Import &lt;math.h&gt;</p></li>
</ul>
<h2 id="equality-and-relational-operators">Equality and Relational
Operators</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/rmHds4R.png"></p>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Control Statement-Part 1</title>
    <url>/2023/01/18/Chapter%203,%20Control%20Statement_%20Part%201/</url>
    <content><![CDATA[<h1 id="chapter-3-control-statement-part-1">Chapter 3, Control
Statement: Part 1</h1>
<h2 id="control-structure">Control Structure</h2>
<ul>
<li>The sequence structure</li>
<li>The selection strcture</li>
<li>The repetition structure</li>
</ul>
<h2 id="selection-statements">Selection Statements</h2>
<ul>
<li>To choose among courses of action.</li>
<li>if: A single-selection statement</li>
<li>if...else: A double-selection statement</li>
<li>switch: A multiselection statement</li>
</ul>
<h3 id="conditional-operators">Conditional Operators(?:)</h3>
<ul>
<li>Closely related to the if..else function.</li>
</ul>
<p>Ex: <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> x{<span class="number">0</span>}, y{<span class="number">1</span>};</span><br><span class="line">    result=x&lt;y?<span class="string">"x&lt;y"</span>:<span class="string">"x&gt;y"</span>;</span><br><span class="line">    std::cout&lt;&lt;result;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> Accodring to the code, it will cout x<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.312ex" role="img" focusable="false" viewBox="0 -540 778 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g></g></g></svg></mjx-container></span>y in the command prompt.</p>
<ul>
<li>Another way to declare integers: int x{0} equals to int x=0</li>
</ul>
<h2 id="repetition-statementslooping-statements">Repetition
Statements(Looping Statements)</h2>
<ul>
<li>while: do the action zero or more times.</li>
<li>do...while: do the action at least once.</li>
<li>for: do the action zero or more times.</li>
</ul>
<h3 id="counter-controlled-repetition">Counter Controlled
Repetition</h3>
<ul>
<li>Counter variables are normally initialized to zero or one, depending
on their use.</li>
<li>Remember to initialize the counter varible, or it might contain some
garbage variable.</li>
</ul>
<h2 id="how-to-change-the-tpye-of-a-object">How to change the tpye of a
object</h2>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">static_cast</span>&lt;type&gt;(object);</span><br><span class="line">    (type)object;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="setprecision">setprecision()</h2>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    std::cout&lt;&lt;std::<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;floatnum; <span class="comment">//start from the first num after fixed point</span></span><br><span class="line">    std::cout&lt;&lt;fixed::std::<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;floatnum; <span class="comment">//start from the first num before fixed point</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="common-keywords-in-c-and-c">Common Keywords in C++ and C</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/qm5wD9b.png"></p>
<h2 id="assignment-operators">Assignment Operators</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/JHI93gS.png"></p>
<h2 id="preincrement-and-postincrement">Preincrement and
Postincrement</h2>
<ul>
<li>Preincrement =&gt; Increment a by 1, then use the new value of a in
the expression in which a resides.</li>
<li>Postincrement =&gt; Use the current value of a in the expression in
which a resides, then increment a by 1.</li>
</ul>
<p>Ex: <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    cout&lt;&lt;a++&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment">//do a=a+1 after cout</span></span><br><span class="line">    <span class="type">int</span> b=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;b&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    cout&lt;&lt;++b&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment">//do b=b+1 before cout</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Control Statement-Part 2</title>
    <url>/2023/01/18/Chapter%204,%20Control%20Statement_%20Part%202/</url>
    <content><![CDATA[<h1 id="chapter-4-control-statement-part-2">Chapter 4, Control
Statement: Part 2</h1>
<h2 id="do...while">do...while</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>{</span><br><span class="line"></span><br><span class="line">}<span class="keyword">while</span>;(condition)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>do...while always check the continuation after the code inside the
{} has been excecuted. Therefore, it will execute at least one time.
<img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/OQEIHFE.png"></li>
</ul>
<h2 id="switch-case">switch case</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression){</span><br><span class="line">    <span class="keyword">case</span> constant1:</span><br><span class="line">        <span class="comment">//execute while expression is constant1;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> constant2:</span><br><span class="line">        <span class="comment">//execute while expression is constant2;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">        <span class="comment">//execute while expression is F or f;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>+<span class="number">2</span>:</span><br><span class="line">        <span class="comment">//not allowed</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>+<span class="number">4</span>:</span><br><span class="line">        <span class="comment">//not allowed</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//code to be executed if expression doesn't</span></span><br><span class="line">        <span class="comment">// match any constant</span></span><br><span class="line">        </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Perform many different actions based on the value of expression.
<img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/ygwibqG.png"></li>
</ul>
<h2 id="setw">setw()</h2>
<ul>
<li>setw() =&gt; print spaces to make it tidy. <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/rY3G69w.png"></li>
</ul>
<h2 id="eof">EOF</h2>
<ul>
<li>EOF =&gt; End of file by entering ctrl+z. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">cin&gt;&gt;sth;</span><br><span class="line"><span class="keyword">while</span>(cin.<span class="built_in">get</span>()!=EOF){</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="cin.get-vs-cin">cin.get() vs cin&gt;&gt;</h2>
<ul>
<li>cin.get() -&gt; only read one character.</li>
<li>cin -&gt; depends on &gt;&gt;. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> grade, aC{<span class="number">0</span>}, bC{<span class="number">0</span>}, cC{<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">while</span>((grade=std::cin.<span class="built_in">get</span>())!=EOF){</span><br><span class="line">        <span class="keyword">switch</span>(grade){</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">            aC++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">            bC++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">            cC++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    std::cout&lt;&lt;aC&lt;&lt;<span class="string">' '</span>&lt;&lt;bC&lt;&lt;<span class="string">' '</span>&lt;&lt;cC;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="c-modified-data-types">C++ Modified Data Types</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/tTgVBZW.png"></p>
<h2 id="continue-vs-break">Continue vs Break</h2>
<ul>
<li>Continue -&gt; Only skip a specific process.</li>
<li>Break -&gt; Skip the whole process.</li>
</ul>
<h2 id="boolalpha">Boolalpha</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">std::cout&lt;&lt;<span class="literal">true</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">std::cout&lt;&lt;std::boolalpha;</span><br><span class="line">std::cout&lt;&lt;<span class="literal">true</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">//The result will be 1 and true.</span></span><br></pre></td></tr></table></figure></div>
<h2 id="operators-precedence">Operator's Precedence</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/MyvXHDH.png"></p>
<ul>
<li>The right side of the &amp;&amp; will only be considered if the left
side is true.</li>
<li>The &amp;&amp; operator has a higher precedence than ||.</li>
<li>Any nonezero value is interpreted as ture. Which means if(a=5){...}
will be true.</li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Functions and Introduction to Recursion</title>
    <url>/2023/01/18/Chapter%205%20Functions%20and%20Introduction%20to%20Recursion/</url>
    <content><![CDATA[<h1 id="chapter-5-functions-and-introduction-to-recursion">Chapter 5
Functions and Introduction to Recursion</h1>
<h2 id="cmath">Cmath</h2>
<p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br></pre></td></tr></table></figure></div> <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/wRjFGr7.png"> <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/QFZhdi3.png"></p>
<h2 id="defining-our-own-fucntion">Defining Our Own Fucntion</h2>
<ul>
<li>Exapmple(square function) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span>)</span></span>; <span class="comment">//function prototype declaration</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    ...sth</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> y)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> y*y;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
<li>We can define a function with default value.</li>
<li>Default value must be the rightmost in a function’s parameter
list.</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> y=<span class="number">1</span>)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> y*y;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">square</span>(); <span class="comment">//cout 1</span></span><br><span class="line">    <span class="built_in">square</span>(<span class="number">2</span>); <span class="comment">//cout 4</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="void">void</h2>
<ul>
<li>Used when defining a function that doesn't return a value.
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span></span>{</span><br><span class="line">    std::cout&lt;&lt;x*x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="standard-library-header-files">Standard Library Header
Files</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/QO6ThdF.png"> <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/JFYKrW9.png"> <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/JBLkhgH.png"> <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/ROPhZnW.png"></p>
<h2 id="random-number">Random Number</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="built_in">rand</span>()</span><br></pre></td></tr></table></figure></div>
<h2 id="time-function">Time Function</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">time</span>();/How many seconds has passed since <span class="number">1970.1</span><span class="number">.1</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure></div>
<h2 id="why-is-rand-not-that-random">Why is rand() not that random?</h2>
<ul>
<li>You have to set random seed. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> seed{<span class="number">0</span>};</span><br><span class="line">cin&gt;&gt;seed; <span class="comment">//input a random number.</span></span><br><span class="line"><span class="built_in">srand</span>(seed);</span><br></pre></td></tr></table></figure></div> <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>());</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="enumerate">Enumerate</h2>
<ul>
<li>If i set win=1, lost will be 2, continue will be 3.</li>
<li>win{1} is not allowed, only win=1 will work. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Game_Status</span>{WIN, LOST, CONTINUE}; </span><br><span class="line"><span class="comment">//win=0, lost=1, continue=2.</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="static-using-with-local-variables">static using with local
variables</h2>
<ul>
<li>You can see it as a way to make local variable to become a global
variable.</li>
<li>It will only be initialized one time! <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> x=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Example code</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">static_num</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    x++;</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">static_num</span>();</span><br><span class="line">    <span class="built_in">static_num</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="static-using-with-global-variables">static using with global
variables</h2>
<ul>
<li>The variable used with static is only accessible for the specific
file.</li>
</ul>
<h2 id="extern">extern</h2>
<ul>
<li>Get a variable from another file. Ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//file_1</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//file_2</span></span><br><span class="line"><span class="keyword">extern</span> a;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="inline">inline</h2>
<ul>
<li>The cost of defining a function is too big，inline will decrease the
cost.</li>
<li>The concept of inline is expansion</li>
<li>inline can only be used when doing simple calculation.
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">cube</span><span class="params">(<span class="type">int</span> x)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> x*x*x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">cube</span>(x); <span class="comment">//cube(x)=x*x*x</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="pass-by-reference.">Pass by reference.</h2>
<ul>
<li>It will affect the original value of a variable.</li>
<li>Adding a '&amp;' in front of a variable, with '&amp;' the function
will directly put the variable (num) into the function.</li>
<li>It won't use extra ram space to store a number. (int a=1; int b=a;
will use extra ram space)</li>
<li>The concept is like domain. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">function</span><span class="params">(<span class="type">int</span> &amp;number)</span></span>{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cube</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>{</span><br><span class="line">    x=x*x*x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    <span class="built_in">cube</span>(num);</span><br><span class="line">    cout&lt;&lt;num;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="acces-to-a-global-variable">Acces to a global variable</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> x=<span class="number">5</span>;</span><br><span class="line">    std::cout&lt;&lt;::x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="function-overloading">Function overloading</h2>
<ul>
<li>C++ enables several functions of the same name to be defined, as
long as they have different signatures.</li>
<li>The compiler will automatically choose the proper function to
execute. Depending on the data type or the amount of the parameter
list<br>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span></span>{</span><br><span class="line">    std::cout&lt;&lt;x*x&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">square</span><span class="params">(<span class="type">double</span> x)</span></span>{</span><br><span class="line">    std::cout&lt;&lt;x*x&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">square</span>(<span class="number">1</span>); <span class="comment">//cout 1</span></span><br><span class="line">    <span class="built_in">square</span>(<span class="number">1.1</span>); <span class="comment">//cout 1.21</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="making-and-using-your-own-library">Making and using your own
library</h2>
<ul>
<li>Example: Finding max of three numbers.</li>
<li>.h template</li>
<li>template &lt;class T&gt; means that every type of data can use this
function.</li>
<li>The way to decalre a template function is the same as normal
function. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function">T <span class="title">maximum</span><span class="params">(T value1, T Value2, T Value3)</span></span>{</span><br><span class="line">    T maximumValue =value1;</span><br><span class="line">    <span class="keyword">if</span>(Value2&gt;maximumValue){</span><br><span class="line">        maximumValue=Value2;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(Value3&gt;maximumValue){</span><br><span class="line">        maximumValue=Value3;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maximumValue;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
<li>main program <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"maximum.h"</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">    <span class="keyword">while</span>(std::cin&gt;&gt;x&gt;&gt;y&gt;&gt;z){</span><br><span class="line">        std::cout&lt;&lt;<span class="string">"Max= "</span>&lt;&lt;<span class="built_in">maximum</span>(x, y, z);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="recursion">Recursion</h2>
<ul>
<li>A function calling oneself.</li>
<li>Example of factorial of a nonnegative function with recursion.
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="title">factorial</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> num)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(num&lt;=<span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> num*<span class="built_in">factorial</span>(num<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
<li>Example of Fibonacci Series <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="title">fib</span><span class="params">(usigned <span class="type">long</span> num)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">1</span>||num==<span class="number">0</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fib</span>(num<span class="number">-1</span>)+<span class="built_in">fib</span>(num<span class="number">-2</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>STL(Standard Template Library)</title>
    <url>/2023/01/18/STL(Standard%20Template%20Library)/</url>
    <content><![CDATA[<h1 id="stlstandard-template-library">STL(Standard Template
Library)</h1>
<h2 id="vector">Vector</h2>
<ul>
<li>用法基本跟array一樣，可以把它想成動態陣列。</li>
<li>宣告時可以不用確定大小</li>
<li>宣告一向量時，所有範圍內的值會被初始成0。</li>
<li>可以使用'=='比較兩向量時</li>
<li>使用'='時，會將一向量的值賦予到另一向量。</li>
<li>vector<int> v2(v1);=&gt;複製v1到v2。</int></li>
<li>集合尾端增刪元素很快 : O(1)</li>
<li>集合中間增刪元素比較費時 : O(n)</li>
<li>erase(a, b); =&gt; 刪除 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.683ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2069.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(807,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1251.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(1680.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>.</li>
<li>begin()=&gt;第一個元素</li>
<li>end()=&gt;最後一個元素的下一個(沒有值)</li>
<li>erase(v.begin(), v.end()) =&gt; erase every elements.</li>
<li>pop_back()只會將vector的大小做修改，但值還是會存在原本的位置。</li>
<li>vector[100]=vector<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.629ex" height="0.271ex" role="img" focusable="false" viewBox="0 -120 278 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container></span>at(100);
<ul>
<li>使用"[]"並不會在超過向量大小時顯示錯誤。</li>
<li>使用".at()"會在超過向量大小時顯示錯誤。</li>
</ul></li>
</ul>
<p>用法1(push_back and pop_back): <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec; <span class="comment">//declaration of vector</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++){</span><br><span class="line">		vec.<span class="built_in">push_back</span>(i);	<span class="comment">//push_back to put elements into vector</span></span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">"\n"</span>;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++){</span><br><span class="line">		cout&lt;&lt;vec[i]&lt;&lt;<span class="string">"\n"</span>;	<span class="comment">//cout each element</span></span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++){</span><br><span class="line">		vec.<span class="built_in">pop_back</span>();	<span class="comment">//pop_back to remove the last element from the vector</span></span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">"\n"</span>;	</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> 用法二(insert and erase)
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++){</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">else</span> vec.<span class="built_in">push_back</span>(i+<span class="number">1</span>); </span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vec.<span class="built_in">size</span>(); i++){</span><br><span class="line">		cout&lt;&lt;vec[i]&lt;&lt;<span class="string">' '</span>;				<span class="comment">//cout 1 3</span></span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>()+<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vec.<span class="built_in">size</span>(); i++){</span><br><span class="line">		cout&lt;&lt;vec[i]&lt;&lt;<span class="string">' '</span>;				<span class="comment">//cout 1 2 3</span></span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vec.<span class="built_in">size</span>(); i++){</span><br><span class="line">		cout&lt;&lt;vec[i]&lt;&lt;<span class="string">' '</span>;				<span class="comment">//cout 1 3</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> 用法三(empty(), size(), resize(), capacity(), reserve())
Reference:https://stackoverflow.com/questions/7397768/choice-between-vectorresize-and-vectorreserve
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">	<span class="keyword">if</span>(vec.<span class="built_in">empty</span>()){</span><br><span class="line">		cout&lt;&lt;boolalpha&lt;&lt;vec.<span class="built_in">empty</span>()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		cout&lt;&lt;<span class="string">"size of vector "</span>&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">'\n'</span>; </span><br><span class="line">	}</span><br><span class="line">	vec.<span class="built_in">resize</span>(<span class="number">3</span>);		</span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">'\n'</span>;		<span class="comment">//current size</span></span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">capacity</span>()&lt;&lt;<span class="string">'\n'</span>;		<span class="comment">//current maximum capacity</span></span><br><span class="line">	vec.<span class="built_in">reserve</span>(<span class="number">4</span>);		</span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    cout&lt;&lt;vec.<span class="built_in">capacity</span>()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> * capacity and size * 容量 (capacity) : 是這個 vector
擁有的空間。 * 長度 (size) : 是實際儲存了元素的空間大小。capacity
永遠不小於 size。 * reserve() vs resize() * reserve()
的目的是擴大容量。做完時，vector 的長度不變，capacity
只會長大不會縮小，資料所在位置可能會移動 (因為會重配空間)。因為 vector
一開始是空的，立刻預留顯然比填了資料後才預留省了拷貝資料的時間。 *
resize() 的目的是改變 vector 的長度。做完時，vector
的長度會改變為指定的大小，capacity 則視需要調整，確保不小於
size，資料所在位置可能會移動。如果變小就擦掉尾巴的資料，如果變大就補零。補零如果會超過容量，會做重配空間的動作。
*
白話文就是reserve()創造空間，但沒有隨機產生值，因此不能做訪問。resize()則是除了創造空間，也隨機產生值，故可直接訪問。
* 二維vector *將眾多一維vector塞入二維vector。 <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; test_2D;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++){</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> counter=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++){</span><br><span class="line">            temp.<span class="built_in">push_back</span>(counter);</span><br><span class="line">            counter++;</span><br><span class="line">        }</span><br><span class="line">        test_2D.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;test_2D.<span class="built_in">size</span>(); i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;test_2D[<span class="number">0</span>].<span class="built_in">size</span>(); j++){</span><br><span class="line">            cout&lt;&lt;test_2D[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        }</span><br><span class="line">        cout&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> Result:
<img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/8mMfbp6.png"></p>
<h2 id="queue">Queue</h2>
<ul>
<li>僅能取得(操作)頭與尾的element.</li>
<li>具有fifo(first in first out)的特性.</li>
<li>用法1(push(), pop(), front(), back(), size(), empty()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++){</span><br><span class="line">		q.<span class="built_in">push</span>(i+<span class="number">1</span>);	<span class="comment">//adding elements</span></span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;<span class="string">"Size: "</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">"First element: "</span>&lt;&lt;q.<span class="built_in">front</span>()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">"Last element: "</span>&lt;&lt;q.<span class="built_in">back</span>()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++){</span><br><span class="line">		q.<span class="built_in">pop</span>();		<span class="comment">//remove the first element</span></span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span>(q.<span class="built_in">empty</span>()){</span><br><span class="line">		cout&lt;&lt;boolalpha&lt;&lt;q.<span class="built_in">empty</span>(); <span class="comment">//return 1 if q is empty</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
## Stack</li>
<li>僅能取得(操作)最上層的element.</li>
<li>具有lifo(last in first out)的特性.</li>
</ul>
<p>用法1(psuh(), pop(), top(), size(), empty()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++){</span><br><span class="line">		s.<span class="built_in">push</span>(i+<span class="number">1</span>);    <span class="comment">//not reference</span></span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;<span class="string">"Size: "</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">"The top stack: "</span>&lt;&lt;s.<span class="built_in">top</span>()&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//reference</span></span><br><span class="line">	s.<span class="built_in">pop</span>();	<span class="comment">//removing the first stack</span></span><br><span class="line">	cout&lt;&lt;<span class="string">"Size:"</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; s.<span class="built_in">size</span>()!=<span class="number">0</span>; i++){</span><br><span class="line">		s.<span class="built_in">pop</span>();</span><br><span class="line">	}</span><br><span class="line">	cout&lt;&lt;<span class="string">"size: "</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(s.<span class="built_in">empty</span>()){</span><br><span class="line">		cout&lt;&lt;<span class="string">"empty"</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> ## Set *
就是集合。 * 可用於快速查找elements 是否存在。 *
每個elements皆是唯一的，不可重複。 * 每個elements皆不能做修改。 *
具有順序性。 * 操作簡單。 * elements 太多會拖慢速度。 <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/1mdMgul.png"></p>
<p>用法1(insert(), count(), erase(), clear(), empty()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">10</span>;i&lt;=<span class="number">50</span>; i+=<span class="number">10</span>){</span><br><span class="line">        s.<span class="built_in">insert</span>(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">count</span>(<span class="number">10</span>)){</span><br><span class="line">        cout&lt;&lt;boolalpha&lt;&lt;<span class="literal">true</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">    s.<span class="built_in">erase</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">count</span>(<span class="number">10</span>)){</span><br><span class="line">        cout&lt;&lt;boolalpha&lt;&lt;<span class="literal">true</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        cout&lt;&lt;boolalpha&lt;&lt;<span class="literal">false</span>&lt;&lt;<span class="string">"\n"</span>; </span><br><span class="line">    }</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">empty</span>()){</span><br><span class="line">        cout&lt;&lt;<span class="string">"empty"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p>
<h2 id="map">Map</h2>
<ul>
<li>有排序關聯式容器。</li>
<li>map中的元素會根據對應的鍵值(key)做排序。</li>
<li>鍵值具有唯一性。</li>
<li>高效率，使用簡單。 <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/anN3pMV.png"></li>
</ul>
<p>用法1(insert(), erase(), clear(), empty()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//initialization</span></span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; m ={</span><br><span class="line">        {<span class="string">"One"</span>, <span class="number">1</span>},</span><br><span class="line">        {<span class="string">"Two"</span>, <span class="number">2</span>},</span><br><span class="line">        {<span class="string">"Three"</span>, <span class="number">3</span>}</span><br><span class="line">    };</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">"Four"</span>, <span class="number">4</span>));</span><br><span class="line">    m[<span class="string">"Five"</span>]=<span class="number">5</span>;</span><br><span class="line">    cout&lt;&lt;m[<span class="string">"Five"</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    m.<span class="built_in">erase</span>(<span class="string">"Five"</span>);</span><br><span class="line">    cout&lt;&lt;m.<span class="built_in">size</span>()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    m.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">if</span>(m.<span class="built_in">empty</span>()){</span><br><span class="line">        cout&lt;&lt;<span class="string">"empty"</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> ## Algorithm
* 常用演算法。</p>
<p>用法1(sort(), reverse()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;input&amp;&amp;input!=<span class="number">-1</span>){</span><br><span class="line">        v.<span class="built_in">push_back</span>(input);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++){</span><br><span class="line">        cout&lt;&lt;v[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++){</span><br><span class="line">        cout&lt;&lt;v[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>自我介紹</title>
    <url>/2023/01/17/%E8%87%AA%E6%88%91%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h3 id="大家好我是itzlanjiao目前就讀彰化師範大學電子工程學系大一本網站的目的是為了對大學四年的課堂內容及個人手做小專題做些紀錄及分享歡迎你的到來">大家好，我是ItzLanJiao，目前就讀彰化師範大學電子工程學系大一，本網站的目的是為了對大學四年的課堂內容及個人手做小專題做些紀錄及分享，歡迎你的到來!</h3>
]]></content>
      <tags>
        <tag>Introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>補充資料</title>
    <url>/2023/01/18/%E8%A3%9C%E5%85%85%E8%B3%87%E6%96%99/</url>
    <content><![CDATA[<h1 id="補充資料">補充資料</h1>
<h2 id="literal-constant">Literal Constant</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/s7Ps4NN.png"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/QjOdk1K.png"></p>
<p>Ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	cout&lt;&lt;<span class="number">75</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">0113</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">0x4b</span>&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//Decimal, Octal, Hexadecimal</span></span><br><span class="line">	cout&lt;&lt;<span class="number">75</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">75u</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">75l</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">75ul</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">75lu</span>&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//int, unsigned, unsigned long, usigned long</span></span><br><span class="line">	cout&lt;&lt;<span class="number">6.02e23</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">1.6e-19</span>&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//6.02*10^23</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p>
<h2 id="bitwise-operators">Bitwise Operators</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/7AphOD4.png"></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0b00000001</span>;</span><br><span class="line">	<span class="type">int</span> y=<span class="number">0b00000000</span>;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x&lt;&lt;<span class="number">1</span>)&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="string">"\n"</span>; <span class="comment">//left / right shift for 1 bit </span></span><br><span class="line">	cout&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(~x)&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x|y)&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x&amp;y)&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x^y)&lt;&lt;<span class="string">"\n"</span>; <span class="comment">// not, or, and, xor</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="dynamic-memory-allocation">Dynamic Memory allocation</h2>
<p>Reference: http://ccy.dd.ncu.edu.tw/~chen/course/Cpp/ch5/6.htm <img lazyload="" src="/images/loading.svg" data-src="https://i.imgur.com/kxplKpS.png"></p>
<p>Ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> *p;</span><br><span class="line">	p=<span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">	*p=<span class="number">100</span>;</span><br><span class="line">	cout&lt;&lt;*p;</span><br><span class="line">	<span class="keyword">delete</span> p; <span class="comment">//release the memory space</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div> Ex2: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="type">int</span> *p=<span class="keyword">new</span> <span class="type">int</span> [<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++){</span><br><span class="line">		*(p+i)=i;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++){</span><br><span class="line">		cout&lt;&lt;*(p+i)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">delete</span> []p; <span class="comment">//release memory space</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></p>
<h2 id="linked-list寒假學">Linked List(寒假學)</h2>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
