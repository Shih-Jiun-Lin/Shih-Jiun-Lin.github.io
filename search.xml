<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Data Manipulation(I)</title>
    <url>/2023/01/18/2023-01-17-Data%20Manipulation(I)/</url>
    <content><![CDATA[<h1 id="data-manipulationi">Data Manipulation(I)</h1>
<h2 id="the-communication-between-cpu-and-memory">The communication
between CPU and memory</h2>
<p>Register -&gt; CPU Cache</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/sEBH2IU.png"
                      
                ></p>
<ul>
<li>Adding values in memory
<ol type="1">
<li>Get value A from the memory and put it in a register.</li>
<li>Get value B from the memory and put it in another register.</li>
<li>Activate the additional circuit and put the final value into another
register.</li>
<li>Store the result the memory.</li>
</ol></li>
<li>Machine instruction
<ol type="1">
<li>Data transfer
<ul>
<li>load, store, I/O</li>
</ul></li>
<li>Arithmetic/logic
<ul>
<li>and, or, add, sub...</li>
<li>shift, halt</li>
</ul></li>
<li>Control
<ul>
<li>jump, halt</li>
</ul></li>
<li>RISC -&gt; Reduced instruction set computing
<ul>
<li>Ex: PRC, SPRC</li>
</ul></li>
<li>CISC -&gt; Complex instruction set computing
<ul>
<li>Ex: x86，x64</li>
</ul></li>
</ol></li>
</ul>
<h2 id="example-of-machine-instruction">Example of machine
instruction</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/UYGKbh0.png"
                      
                ></p>
<ul>
<li>3 -&gt; store</li>
<li>5 -&gt; register No.5</li>
<li>A7 -&gt; memory cell A7</li>
<li>all in all -&gt; Store the content of register No.5 to memory cell
A7.</li>
</ul>
<h2 id="the-machine-instruction-of-adding-two-values">The machine
instruction of adding two values</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/Xa7EtHE.png"
                      
                ></p>
<h2 id="program-execution">Program execution</h2>
<ul>
<li><p>Machine cycle <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/N1Jiuk9.png"
                      
                ></p></li>
<li><p>Fetch <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/pJF8QS9.png"
                      
                ></p></li>
<li><p>Clock -&gt; how many machine cycle a cpu is able to do in one
second</p></li>
</ul>
<h2 id="arithmetic-and-logic-unitalu">Arithmetic and logic
unit(ALU)</h2>
<ul>
<li>Arithmetic operations</li>
<li>Logic/bit operations</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/pfBxlEH.png"
                      
                ></p>
<h2 id="shiftrotation">Shift/Rotation</h2>
<ul>
<li>Logic shift
<ul>
<li>10100000 -&gt; 01010000(right)</li>
<li>10100000 -&gt; 01000000(left)</li>
<li>Both moving left and right add a 0</li>
</ul></li>
<li>Arithmetic shift
<ul>
<li><p>10100000 -&gt; 11010000(right, the number is divided by 2) Moving
right，copy the leftest bit.</p></li>
<li><p>10100000 -&gt; 11000000(left, the number is multiplied by 2)
Moving left，add a 0 to the right.</p></li>
</ul></li>
<li>Rotation
<ul>
<li>10100000 -&gt; 01010000(right)</li>
<li>10100000 -&gt; 01000001(left)</li>
</ul></li>
</ul>
<h2 id="controllers-and-peripheral-devices">Controllers and peripheral
devices</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/AZ4fwQH.png"
                      
                ></p>
<ul>
<li>Specialized -&gt; SATA...</li>
<li>General -&gt; USB, HDMI...</li>
</ul>
<h2 id="memory-mapped-io">Memory-mapped I/O</h2>
<ul>
<li>The periphral devices are recognized as part of the memory. <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/YFL6td3.png"
                      
                ></li>
</ul>
<h2 id="communication">Communication</h2>
<ul>
<li>DMA(direct memory access)
<ul>
<li>Authorized controllers can access data directly from main memory
without notifying CPU</li>
</ul></li>
<li>Hand shaking
<ul>
<li>Two way communication</li>
<li>Coordinating activities</li>
</ul></li>
<li>Parallel/Serial</li>
<li>Transfer rate unit -&gt; bit per second</li>
</ul>
<h2 id="pipeliningaccelerating-the-process">Pipelining(accelerating the
process)</h2>
<p>ex -&gt; pre-fetching</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/gPsrUkp.png"
                      
                ></p>
<ul>
<li>Throughput -&gt; Total amount of work accomplished in a given amount
of time</li>
<li>Pre-fetching issus -&gt; conditional jump</li>
</ul>
<h2 id="paralleldistributed-computing">Parallel/distributed
computing</h2>
<ul>
<li>Parallel
<ul>
<li>Multiprocessor</li>
<li>MIMD，SISD，SIMD，MISD(M-&gt;Multiple，S-&gt;Single，I-&gt;Instruction,
D-&gt;Dataset)</li>
</ul></li>
<li>Distributed
<ul>
<li>Linking computers via network</li>
<li>Seperate processors and memory</li>
</ul></li>
<li>Issues
<ul>
<li>Data dependency</li>
<li>Load balancing</li>
<li>Synchronization</li>
<li>Reliability</li>
</ul></li>
</ul>
<h2 id="how-to-parallelize">How to parallelize?</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/xrTQCOL.png"
                      
                ></p>
<h2 id="speed-up-and-scaling">Speed up and Scaling</h2>
<ul>
<li>Amdahl's law(阿姆達爾定律)</li>
<li>Gain = $ $ (P -&gt; proportion that is parallelizable, S -&gt;
proportion that is serial only)</li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Storage(I)</title>
    <url>/2023/01/18/2023-01-17-Data%20Storage(I)/</url>
    <content><![CDATA[<h1 id="data-storagei">Data Storage(I)</h1>
<h2 id="binary-world">Binary world</h2>
<ol type="1">
<li>Simple, logical and unambiguous</li>
<li>Boolen operation and gates
<ul>
<li>AND: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/f40BHRy.png"
                      
                ></li>
<li>OR: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/iHu0uCp.png"
                      
                ></li>
<li>Exclusive OR(XOR): <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/Kt4lWeG.png"
                      
                ></li>
<li>NOT: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/naddbwe.png"
                      
                ></li>
</ul></li>
</ol>
<h2 id="flip-flop正反器">Flip-Flop(正反器)</h2>
<ol type="1">
<li>Purpose -&gt; To store 0/1</li>
<li>2 inputs</li>
<li>One -&gt; set 0</li>
<li>The other -&gt; set 1</li>
<li>It will preserve 0/1 if there is no inputs</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/CM0A35v.png"
                      
                ><br />
</li>
</ol>
<ul>
<li>Simple SR Flip-Flop Circuit <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/UxaHn8a.png"
                      
                ></li>
<li>Another Simple SR Flip-Flop Circuit <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/eHtGv2l.png"
                      
                ></li>
</ul>
<h2 id="hexadecimalhex十六進位">Hexadecimal(Hex，十六進位)</h2>
<ol type="1">
<li>Reason of using Hex -&gt;
<ul>
<li>Binary is too long for human to remember</li>
<li>Binary to Hex is straightforward</li>
</ul></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/4SckAD3.png"
                      
                ></li>
</ol>
<h2 id="main-memory-cell">Main memory cell</h2>
<ol type="1">
<li>8 bits -&gt; 1 cell -&gt; 1 byte</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/0tHCICX.png"
                      
                ></li>
</ol>
<h2 id="memory">Memory</h2>
<ol type="1">
<li>One dimensional</li>
<li>Random accessible</li>
<li>Access the content via the address</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/848KpU9.png"
                      
                ></li>
</ol>
<h2 id="memory-techniques">Memory techniques</h2>
<ol type="1">
<li>Random access memory (Ram): Memory in which individual cells can be
easily accessed in any order
<ul>
<li>Type: Static Memory(SRAM), Dynamic Memory(DRAM), Synchronous
DRAM(SDRAM)</li>
<li>Double Date Rate(DDR)-&gt;Faster when reading data</li>
<li>Dual/Triple channel</li>
</ul></li>
<li><ul>
<li>Kilobyte: <span class="math inline">\(2^{10}\)</span> = 1024 bytes
<span class="math inline">\(\simeq\)</span> <span
class="math inline">\(10^{3}\)</span> bytes</li>
<li>Megabyte: <span class="math inline">\(2^{20}\)</span> = 1038576
bytes <span class="math inline">\(\simeq\)</span> <span
class="math inline">\(10^{6}\)</span> bytes</li>
<li>Gigabyte: <span class="math inline">\(2^{30}\)</span> = 1073741824
bytes <span class="math inline">\(\simeq\)</span> <span
class="math inline">\(10^{9}\)</span> bytes</li>
</ul></li>
</ol>
<h2 id="mass-storage">Mass Storage</h2>
<ol type="1">
<li>Properties:
<ul>
<li>Larger capacity</li>
<li>Less volatility</li>
<li>Slower</li>
<li>On-line or off-line</li>
</ul></li>
<li>Types:
<ul>
<li>Magnetic systems(HDD，Floppy Disk)</li>
<li>Optical systems(CD，DVD)</li>
<li>Flash drives(SSD)</li>
</ul></li>
<li>Magnetic storage:
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/FaS4kFn.png"
                      
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/Blqj4wl.png"
                      
                ></li>
<li>Access time = seek time(To reach the right track) + rotation
delay(latency time，To reahc the right sector)</li>
<li>Transfer rate(SATA)</li>
</ul></li>
<li>Optical storage
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/4CxHApt.png"
                      
                ></li>
</ul></li>
<li>Physical and logical records
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/dUAwIy8.png"
                      
                ></li>
</ul></li>
<li>Buffer(緩衝區)
<ul>
<li>Purpose: To synchronize different read/write mechanisms and
rates</li>
<li>An area used to temporarily store data</li>
</ul></li>
</ol>
<h2 id="representing-text">Representing text</h2>
<ol type="1">
<li>ASCII: 7 bits (or 8 bits starts with 0)</li>
<li>Unicode: 16 bits</li>
<li>ISO: 32 bits</li>
</ol>
<h2 id="representing-numbers">Representing numbers</h2>
<ol type="1">
<li><p>901 (decimal): <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/gUkyMRy.png"
                      
                ></p></li>
<li><p>11 (binary): <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/yCSMAtg.png"
                      
                ></p></li>
<li><p>From binary to decimal <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/77twv7u.png"
                      
                ></p></li>
<li><p>From decimal to binary <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/CxpuQ3J.png"
                      
                ></p></li>
</ol>
<h2 id="representing-img">Representing img</h2>
<ol type="1">
<li>Bit map techniques:
<ul>
<li>Pixel: the element of a picture</li>
<li>Colors: RGB，HSV，etc.</li>
</ul></li>
<li>Vector techniques:
<ul>
<li>Properties: Scalable</li>
<li>Truetype，Postscript，SVG(scalable vector graphic)</li>
</ul></li>
</ol>
<h2 id="representing-sound">Representing sound</h2>
<ol type="1">
<li>Sampling
<ul>
<li>Sample rate and bit resolution</li>
<li>Bit rate(sampling rate <span class="math inline">\(\times\)</span>
bit resolution)</li>
</ul></li>
<li>MIDI(synthesis)
<ul>
<li>A protocol designed for recording and playing back music on digital
synthesizers that is supported by many makes of personal computer sound
cards</li>
</ul></li>
</ol>
<h2 id="binary-system-revisited">Binary system revisited</h2>
<ol type="1">
<li>Addition
<ul>
<li>0+0=0</li>
<li>1+0=1，0+1=1</li>
<li>1+1=10</li>
</ul></li>
<li>Subtraction
<ul>
<li>Define negative numbers first(Two's Complement Notation)</li>
</ul></li>
</ol>
<h2 id="twos-complement-notation-and-encoding">Two's complement notation
and encoding</h2>
<ol type="1">
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/SisdfNh.png"
                      
                ></li>
<li>Encoding(method 1): <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/yCIZs08.png"
                      
                >
After finishing the process，you can directly do the addition and get
the right answer</li>
<li>Encoding(method 2): Do it as usual binary way<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/qHhHYH7.png"
                      
                ></li>
<li>Encoding(method 3): <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/35BXAa6.png"
                      
                ></li>
</ol>
<h2 id="excess-notation">Excess notation</h2>
<ol type="1">
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/3cyVdYJ.png"
                      
                ></li>
<li>Addition: After the calculation, u have to add 4 to get the right
answer ## Overflow Using the table from Two's complement:</li>
<li>Occurs when the result is out of range(not in table)</li>
<li>Addition of two positive numbers -&gt; 2+3=5 <span
class="math inline">\(\equiv\)</span> -3(mod 8)</li>
<li>Addition of two negative numbers -&gt; (-2)+(-3)=-5 <span
class="math inline">\(\equiv\)</span> -3(mod 8)</li>
</ol>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Storage(II)</title>
    <url>/2023/01/18/2023-01-17-Data%20Storage(II)/</url>
    <content><![CDATA[<h1 id="data-storageii">Data Storage(II)</h1>
<h2 id="fraction-in-binary">Fraction in binary</h2>
<ol type="1">
<li><p>The rules is the same <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/pqwL1v6.png"
                      
                > ## Float-point notation and
decoding</p></li>
<li><p>8 bits representation<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/6YrHIlt.png"
                      
                ><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/BDVrmtA.png"
                      
                ></p>
<ul>
<li>Ex (Use the table of binary): 10010101 -&gt; 1(001)(0101) -&gt;
(<span class="math inline">\(-2^{1}\)</span>)<span
class="math inline">\(\times\)</span>(<span
class="math inline">\(\frac{1}{4}\)</span>+<span
class="math inline">\(\frac{1}{16}\)</span>)=-<span
class="math inline">\(\frac{5}{8}\)</span></li>
</ul></li>
<li><p>On the widely used 64-bit computers，the exponent takes 11
bits，and the mantissa takes 52 bits ## Truncation error</p></li>
<li><p>The precision is beyond the limitation of mantissa.</p>
<ul>
<li>Ex (Use the table of binary): 2<span
class="math inline">\(\frac{5}{8}\)</span> -&gt; 10.101(base two，fixed
point) -&gt; .10101 <span class="math inline">\(\times\)</span> <span
class="math inline">\(2^{2}\)</span> -&gt; 0(010)(1010) -&gt; 2<span
class="math inline">\(\frac{1}{2}\)</span> ## Normalized form</li>
</ul></li>
<li><ul>
<li>The first bit of mantissa is 1</li>
<li>0's floating-point representation is all 0</li>
</ul></li>
<li><p>Normalization:</p>
<ul>
<li>Ex (Use the table of binary): 00100011 -&gt; 0(010)(0011) -&gt;
.0011 <span class="math inline">\(\times\)</span> <span
class="math inline">\(2^{2}\)</span> -&gt; .1100 <span
class="math inline">\(\times\)</span> <span
class="math inline">\(2^{0}\)</span> -&gt; 0(000)(1100)</li>
</ul></li>
<li><p>IEEE normalized form</p>
<ul>
<li>The left-most bit in mantissa is always 1 (Ex: .0101 -&gt;
1.0101)</li>
<li>Standard normalized form is (s)(eee)(mmmm) -&gt; (<span
class="math inline">\(-1^{s}\)</span>) <span
class="math inline">\(\times\)</span> 1.mmmm <span
class="math inline">\(\times\)</span> <span
class="math inline">\(2^{(eee-4)}\)</span>
<ul>
<li>Ex(Use the table of binary): 01100011 -&gt; (0)(110)(0011) -&gt;
<span class="math inline">\((-1)^{0}\)</span> <span
class="math inline">\(\times\)</span> 1.0011 <span
class="math inline">\(\times\)</span> <span
class="math inline">\(2^{(6-4)}\)</span> ## Loss of digits Ex (Use the
table of excess):</li>
</ul></li>
</ul></li>
</ol>
<ul>
<li>4 + <span class="math inline">\(\frac{1}{4}\)</span> + <span
class="math inline">\(\frac{1}{4}\)</span> = (01111000 + 00111000) +
00111000 -&gt; make the exponent the same (01111000 + 01110000) +
01110000 = 4 (the result is wrong)</li>
<li>4 + <span class="math inline">\(\frac{1}{4}\)</span> + <span
class="math inline">\(\frac{1}{4}\)</span> = 01111000 + (00111000 +
00111000) = 4<span class="math inline">\(\frac{1}{2}\)</span> ## Data
compression</li>
<li>Two types -&gt; Lossy and Lossless</li>
<li>Lossless
<ol type="1">
<li>Run-length encoding(RLE)
<ul>
<li>After the process of compressing ，wwwwwww is being recognized as
7w,<br />
</li>
</ul></li>
<li>Frequency-dependent encoding -&gt; Huffman encoding</li>
<li>Dictionary encoding -&gt; Adaptive dictionary encoding, LZW encoding
<ul>
<li>Defining the value by yourself</li>
</ul></li>
</ol></li>
<li>Lossy
<ol type="1">
<li>Relative / difference encoding</li>
</ol></li>
<li>Huffman encoding
<ul>
<li>Ex: AAABBBAABCAAAABD
<ul>
<li>Traditional encoding -&gt; Code book: A -&gt; 00; B -&gt; 01; C
-&gt; 10; D -&gt; 11, represent in 2 bits it will be
000000010101000001100000000111</li>
<li>Huffman encoding -&gt;
<ol type="1">
<li>Count the occurrences: A(9); B(5); C(1); D(1)</li>
<li>Build a huffman tree: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/nWxGAT7.png"
                      
                >
According to the tree, the code book is A -&gt; 0, B -&gt; 10, C -&gt;
110, D -&gt; 111. Through the huffman encoding，the string will be
transfered into 0001010100010110</li>
</ol></li>
</ul></li>
</ul></li>
<li>LZW encoding
<ul>
<li>Is a kind of dictionary encoding that does not need to store the
dictionary</li>
<li>The concept is to generate more values to the dictionary(Usually we
use the ascii code to represent numbers and words, so no addition
dictionary is needed)
<ul>
<li>Code book: x -&gt; 1, y -&gt; 2, space -&gt; 3
<ul>
<li>Ex: xyx xyx xyx xyx -&gt; 1 -&gt; 12 -&gt; 121 -&gt; 1213 Then you
append 1213 to the dictionary as 4 -&gt; 12134 -&gt;121343434 ## Images,
audios and videos</li>
</ul></li>
</ul></li>
</ul></li>
<li>Images:
<ol type="1">
<li>GIF: 256 colors, dictionary encoding</li>
<li>JPEG: Lossy / lossless encoding</li>
</ol></li>
<li>Audios:
<ol type="1">
<li>MP3: Lossy encoding</li>
</ol></li>
<li>Videos:
<ol type="1">
<li>MPEG: Lossy encoding ## Communication errors</li>
</ol></li>
<li>The reason of compressing data is to remove redundency</li>
<li>To correct the communication error -&gt; we add redundancy</li>
<li>Error detection -&gt; instead of correcting errors, it can only
check if the errors occurs
<ul>
<li>Applications(detection):
<ol type="1">
<li>ID numbers</li>
<li>ISBN</li>
<li>Parity code</li>
</ol></li>
</ul></li>
<li>Error correcting -&gt; Can correct errors to some degree ##
Application of error detections / corrections</li>
<li>Taiwan ID:<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/GrBxbtA.png"
                      
                >
<ol type="1">
<li>Convert the first English letter into a number(xy): <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/MzCD1dk.png"
                      
                ></li>
<li><span class="math inline">\(d_1\)</span> = x + 9y</li>
<li><span class="math inline">\(d_2\)</span> = <span
class="math inline">\(\sum_{i = 1}^8\)</span> i <span
class="math inline">\(\cdot\)</span> <span
class="math inline">\(a_i\)</span> = 1 <span
class="math inline">\(\cdot\)</span> <span
class="math inline">\(a_1\)</span> + 2 <span
class="math inline">\(\cdot\)</span> <span
class="math inline">\(a_2\)</span> ... +8 <span
class="math inline">\(\cdot\)</span> <span
class="math inline">\(a_8\)</span></li>
<li>Check code -&gt; <span class="math inline">\(a_9\)</span> = 10 -
((<span class="math inline">\(d_1\)</span> + <span
class="math inline">\(d_2\)</span>) mod 10)</li>
</ol></li>
<li>ISBN-10 ISBN　template: 0-273-75139</li>
</ul>
<ol type="1">
<li>Compute S = 0 <span class="math inline">\(\cdot\)</span> 10 + 2
<span class="math inline">\(\cdot\)</span> 9 +7 <span
class="math inline">\(\cdot\)</span> 8 + 3 <span
class="math inline">\(\cdot\)</span> 7 + 7 <span
class="math inline">\(\cdot\)</span> 6 + 5 <span
class="math inline">\(\cdot\)</span> 5 + 1 <span
class="math inline">\(\cdot\)</span> 4 + 3 <span
class="math inline">\(\cdot\)</span> 3 + 9 <span
class="math inline">\(\cdot\)</span> 2 = 193</li>
<li>M = S mod 11 = 6</li>
<li>N = 11 - M =5
<ul>
<li>If N = 10 the check code is X</li>
<li>If N = 11 the check code is 0</li>
<li>Otherwise, the check code is the number N</li>
</ul></li>
<li>The ISBN code 0-273-75139-5</li>
</ol>
<ul>
<li>Parity Bits
<ol type="1">
<li>Making the quantity of 1s odd <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/gaBDWYj.png"
                      
                ></li>
<li>The technique is used in communication and RAID</li>
</ol></li>
<li>An error-correcting code(ECC)
<ol type="1">
<li>(3, 1) repetition code (can correct 1-bit errors) -&gt; seperate the
data into groups with 1 bit in each group, and add two bits to
authenticate the data <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/SOldZpS.png"
                      
                ></li>
</ol></li>
<li>Hamming distance
<ol type="1">
<li>Comparing two binary data， hamming distance is the amount of
different bits.</li>
</ol></li>
<li>Error correction with hamming distance
<ol type="1">
<li>Maximizing hamming distance along the symbols Sample code book: <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/qvBxx5o.png"
                      
                >
<ul>
<li>Ex: received 010100 Hammig distance: <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/43W6zqv.png"
                      
                > According to the chart, we will
correct 010100 to 011100(D)</li>
</ul></li>
</ol></li>
<li>Generating (7, 4)Hamming code <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/3ugdiSq.png"
                      
                ></li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Networking and the Internet(I)</title>
    <url>/2023/01/18/2023-01-17-Networking%20and%20the%20internet(I)/</url>
    <content><![CDATA[<h1 id="networking-and-the-interneti">Networking and the
Internet(I)</h1>
<h2 id="network-classifications">Network Classifications</h2>
<ul>
<li><p>Scope</p>
<ul>
<li>LAN: Local area network.</li>
<li>MAN: Metropolitan area network.</li>
<li>WAN: Wide area network.</li>
</ul></li>
<li><p>Ownership</p>
<ul>
<li>Closed</li>
<li>Opened</li>
</ul></li>
<li><p>Topology (拓樸學)</p>
<ul>
<li>Bus: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/1QUPg2e.png"
                      
                ></li>
<li>Ring: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/bWnGTBf.png"
                      
                ></li>
<li>Star: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/EWTkIgx.png"
                      
                > ##
Protocols</li>
</ul></li>
<li><p>Token Ring</p>
<ul>
<li>Popular in ring topology.</li>
<li>Token and messages are passed in one direction.</li>
<li>Only the machine which gets the token can transmit its message.</li>
</ul></li>
<li><p>CSMA/CD (Carrier sense, mutiple access with collision
detection)</p>
<ul>
<li>Popular in bus topology.</li>
<li>Broadcasting.</li>
<li>When collision, both machines wait for a random time before trying
again.</li>
</ul></li>
<li><p>CSMA/CA (Carrier sense, mutiple access with collision
avoidence)</p>
<ul>
<li>Popular in wireless Ethernet.</li>
<li>Broadcasting.</li>
<li>Detect if a channel is idle, if so, wait for a random time and then
detect again. If the channel is still idle, then start sending. ##
Wireless and Access Point(AP)</li>
</ul></li>
<li><p>Wi-Fi(wireless fidelity)</p></li>
<li><p>IEEE 802.11-Standard for wireless network(b, g, i, n, ac...) <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/MOBFzwQ.png"
                      
                > ##
Repeater，Bridge，Switch(Compatible Networks) Reference:
https://notfalse.net/66/repeater-hub-bridge-switch</p></li>
<li><p>The protocol between these devices have to be the same.</p></li>
<li><p>Repeater(Amplifier)</p>
<ul>
<li>Passing through messages.</li>
<li>Connecting two compatible networks <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/0t1ZGPW.png"
                      
                ></li>
</ul></li>
<li><p>Bridge</p>
<ul>
<li>Only passing those messages addressed to the other side.</li>
<li>Connecting two compatible networks more efficiently. <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/QEsDF9x.png"
                      
                ></li>
</ul></li>
<li><p>Switch(Multiple Bridge)</p>
<ul>
<li>A bridge with multiple connections.</li>
<li>Connecting mutiple compatible networks efficiently. <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/uwwGpYy.png"
                      
                > ## Router(Incompatible
Networks) <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/rJmNTSf.png"
                      
                ></li>
</ul></li>
<li><p>Router</p>
<ul>
<li>Building a network of networks.(The protocol can be different)</li>
<li>Most come with firewall management. ## Interprocess Communication
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/6pWclWl.png"
                      
                ></li>
</ul></li>
<li><p>Server-Client</p>
<ul>
<li>One server, several clients.</li>
<li>Clients initiate communications by sending requests.</li>
</ul></li>
<li><p>P2P(Peer-to-Peer)</p>
<ul>
<li>Two processes communicating as equals.</li>
<li>The most popular distribution mode nowadays. ## Distributed Systems
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/ZmowcOK.png"
                      
                ></li>
</ul></li>
<li><p>Infrastructure can be provided by standardized toolkits.</p>
<ul>
<li>Ex: Java Beans，.NET framework. ## Internet Architecture <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/rB8IPMk.png"
                      
                ></li>
</ul></li>
<li><p>Domain</p>
<ul>
<li>A network or an internet controlled by one single authority.</li>
</ul></li>
<li><p>ICANN(Internmet corporation for assigned names and numbers)</p>
<ul>
<li>Supervise the registration of doimains</li>
</ul></li>
<li><p>Gateway</p>
<ul>
<li>A router that connects a domain to the rest of the Internet. ##
Internet Composition <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/3reTfwk.png"
                      
                ></li>
</ul></li>
<li><p>Internet Service Provider(ISP)</p>
<ul>
<li>Allow customer to connect their domain to the ISP's equiment or join
the domain already established by the ISP. ## IP Addresses</li>
</ul></li>
<li><p>IP(internet protocol)address</p>
<ul>
<li>IPv4 -&gt; 32bits(all are allocated already)</li>
<li>IPv6 -&gt; 128bits ## Name Server vs Domain Server</li>
</ul></li>
<li><p>Name server:</p>
<ul>
<li>Name servers organize and route traffic across the internet to get
you to the right server.</li>
</ul></li>
<li><p>Domain Name Server(DNS)</p>
<ul>
<li>A server that provide you with server information. <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/rYtlfru.png"
                      
                > ## Internet Application</li>
</ul></li>
<li><p>VoIP(Voice over Internet protocol)</p></li>
<li><p>email(electronic mail)</p></li>
<li><p>FTP(file transfer protocol)</p></li>
<li><p>telnet and ssh(secure shell)</p></li>
<li><p>P2P ## Browsers</p></li>
<li><p>HTTP(Hyper text transfer protocol)</p></li>
<li><p>URL(uniform resource locator)</p></li>
<li><p>How a browser get access to a webpage(document): <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/hY3bIGo.png"
                      
                > ## Client-side and
Server-side</p></li>
<li><p>Client-side(The program is executed on one's pc)</p>
<ul>
<li>Java applets</li>
<li>Javascript</li>
<li>Flash</li>
</ul></li>
<li><p>Server-side(The program is executed on the server)</p>
<ul>
<li>CGI</li>
<li>Servlets</li>
<li>PHP</li>
</ul></li>
<li><p>Online game use both techniques. ## Internet Protocol
Reference:https://ithelp.ithome.com.tw/articles/10259569?sc=pt</p></li>
<li><p>Layers</p>
<ul>
<li>OSI Model
<ul>
<li>Reference: https://en.wikipedia.org/wiki/OSI_model</li>
</ul></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/e5dfV9e.png"
                      
                ></p>
<ul>
<li>TCP/IP Model
<ul>
<li>Application: constructs message into packets.</li>
<li>Transport: chops message into packages.</li>
<li>Network: handles routing through the Internet.</li>
<li>Link handles actual transmission of packets.</li>
</ul></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/0gNoMlv.png"
                      
                ></p></li>
<li><p>Port</p>
<ul>
<li>Incoming messages are delivered to different applications by unique
port numbers. <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/54gXvXI.png"
                      
                > ##
TCP/IP</li>
</ul></li>
<li><p>TCP and UDP(Transport Layer)</p>
<ul>
<li>TCP(transmission control protocol):handshake berfore sending
packets. =&gt; slow but reliable.</li>
<li>UDP(user datagram protocol): directly sending packets. =&gt; fast
but not reliable.</li>
</ul></li>
<li><p>IP(NEtwork Layer)</p>
<ul>
<li>routing based on IP(IPv4, IPv6)</li>
</ul></li>
<li><p>TCP and IP are two protocols. TCP/IP is a collection of protocols
more than just TCP and IP. ## Security</p></li>
<li><p>Attacks</p>
<ul>
<li>Malware</li>
<li>Denial of Service(Dos)</li>
<li>Spam</li>
</ul></li>
<li><p>Protections</p>
<ul>
<li>Firewall</li>
<li>Spam filter</li>
<li>Proxy</li>
<li>Antivirus, antispyware</li>
</ul></li>
<li><p>Public/Private Keys System</p>
<ul>
<li>Reference: https://medium.com/<span class="citation"
data-cites="RiverChan">@RiverChan</span>/%E5%9F%BA%E7%A4%8E%E5%AF%86%E7%A2%BC%E5%AD%B8-%E5%B0%8D%E7%A8%B1%E5%BC%8F%E8%88%87%E9%9D%9E%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-de25fd5fa537</li>
<li>SSL(Secure Scoket Layer)
<ul>
<li>Application: sftp, https, ssh</li>
</ul></li>
<li>To prevent fishing, a certificate authority is needed, to ensure to
correctivity of a key. <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/fnACCIR.png"
                      
                > ##
RSA Algorithm Reference:
https://ithelp.ithome.com.tw/articles/10250721</li>
</ul></li>
<li><p>Generation <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/5SMoi2J.png"
                      
                ></p></li>
<li><p>Encryption <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/WTvEm7R.png"
                      
                ></p></li>
<li><p>Decryption <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/6fnmG7A.png"
                      
                ></p></li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System(I)</title>
    <url>/2023/01/18/2023-01-17-Operating%20System(I)/</url>
    <content><![CDATA[<h1 id="operating-systemi">Operating System(I)</h1>
<h2 id="batch-processingearly-era">Batch processing(early era)</h2>
<ul>
<li>The process of computer operators entering data to the computers and
give the result back to you. <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/mVRCkv6.png"
                      
                ></li>
</ul>
<h2 id="interactive-processingearly-era">Interactive processing(early
era)</h2>
<ul>
<li><p>OS with remote terminals <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/Kovmajm.png"
                      
                ></p></li>
<li><p>Types of operating system</p>
<ul>
<li>Batch(批次)</li>
<li>Interactive</li>
<li>Real-time
<ul>
<li>Response time is critical.</li>
</ul></li>
<li>Time-sharing and multitasking
<ul>
<li>Dividing time into intervals.</li>
<li>Only one task is being performed at any given time.</li>
</ul></li>
<li>Multiprocessor
<ul>
<li>Load balancing</li>
<li>Scaling</li>
</ul></li>
<li>http://www.chwa.com.tw/TResource/VS/book1/ch3/3-2.htm</li>
</ul></li>
<li><p>Software classification <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/WyObhvz.png"
                      
                ></p></li>
<li><p>Shells</p>
<ul>
<li>Communication with users
<ul>
<li>Text based</li>
<li>GUI(Graphical user interface ) ## Kernel</li>
</ul></li>
</ul></li>
<li><p>File manager</p>
<ul>
<li>Directory/folder path</li>
</ul></li>
<li><p>Device drivers</p></li>
<li><p>Memory manager</p>
<ul>
<li>Allocating main memory</li>
<li>Paging, virtual memory<br />
</li>
</ul></li>
<li><p>Schedular</p>
<ul>
<li>The component which selects process to execute.</li>
</ul></li>
<li><p>Dispatcher</p>
<ul>
<li>The component which gives control of CPU to execute the process
selected by Schedular. ## Linux</li>
</ul></li>
<li><p>Made by Linus Torvalds</p></li>
<li><p>Freeware and open-source</p></li>
<li><p>Many distribution (Ex: Ubuntu，Kali)</p></li>
<li><p>Linux only means the kernel ## How is OS being loaded? <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/2CzC6fw.png"
                      
                ></p></li>
<li><p>BIOS(Basic Input/Output Sytem)is usually stored on a EEPEROM
chip(Electrically-Erasable Programable Read-Only Memory) ##
Process</p></li>
<li><p>The activity of executing a program</p></li>
<li><p>Process state</p>
<ul>
<li>Program counter</li>
<li>General purpose registers</li>
<li>Associated memory cells</li>
</ul></li>
<li><p>Process table</p>
<ul>
<li>Memory area assigned to the process</li>
<li>Priority</li>
<li>Ready/waiting(One process for each core) ## Process
Administration</li>
</ul></li>
<li><p>Schedular</p>
<ul>
<li>Use: Maintaining the process table</li>
<li>Introducing new process</li>
<li>Removing completed process</li>
<li>Deciding whether a process is ready or waiting</li>
</ul></li>
<li><p>Dispatcher <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/ae6Hv5z.png"
                      
                ></p>
<ul>
<li>Use: Getting the process to running state.</li>
<li>Controling the allocation of time to the process in the process
table.</li>
<li>Process switch(interrupt) <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/vvtyj1e.png"
                      
                > Multiprogramming between two
processes. ## Semaphores</li>
</ul></li>
<li><p>Meaning of semaphore: A visual sinaling appratus with flags,
lights...</p></li>
<li><p>Test-and-set: Uninterruptible process, it will change the status
of false to true and return it.</p></li>
<li><p>Critical region(臨界區段): A region that is only accessible to a
program.</p>
<ul>
<li>Mutual exclusion(互斥鎖): A process that prevents simultaneous
access to a shared resource. ## Prerequisites for Deadlock</li>
</ul></li>
<li><p>Deadlock may occur only if all three of the following
conditions(necessary but insufficient) are satisfied</p>
<ol type="1">
<li>Competition for non-shareable resources</li>
<li>Resources are requested on a partial basis, receiving some resources
and return later to request more.</li>
<li>Once a resource has been allocated, it cannot be forcibly
retrieved.</li>
</ol></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/LWgDTY9.png"
                      
                > * To prevent Deadlock
from happening, we have to avoid the conditions mentioned above being
satisfied. ## The Consequence of Preventing Deadlock from Happening <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/HxCTDOU.png"
                      
                ></p>
<ul>
<li>Starvation: Process cannot get the resources needed for a long time
because the resources keep being allocated to other processes.</li>
<li>The solution to starvation -&gt; (Aging): Adding an aging factor to
the priority of each request.</li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-計算機概論</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>Chaper 7 Pointers</title>
    <url>/2023/01/18/Chaper%207%20Pointers/</url>
    <content><![CDATA[<h1 id="chaper-7-pointers">Chaper 7 Pointers</h1>
<h2 id="what-is-pointers">What is Pointers?</h2>
<ul>
<li>Declaration: int <em>pointer_name;/char </em>pointer_name;</li>
<li>Data being stored inside a pointer is the address(unsigned int: hex)
of a data in the memory.</li>
<li>Pointer shoud be initialized. A pointer with null or the value 0 is
called null pointer.(0 is the only integer that can be assigned to a
pointer variable) ex: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/4izPqBi.jpg"
                      
                ></li>
</ul>
<h2 id="how-to-assign-the-address-of-a-data-to-pointers">How to assign
the address of a data to pointers?</h2>
<ul>
<li>"*" and "&amp;" are inverses of one another. ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> *pointer;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">	pointer=&amp;a;</span><br><span class="line">	cout&lt;&lt;pointer&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//cout the address of a.</span></span><br><span class="line">	cout&lt;&lt;*pointer&lt;&lt;<span class="string">&quot;\n&quot;</span>;cout&lt;&lt;the value of a.</span><br><span class="line">	cout&lt;&lt;*&amp;a; <span class="comment">//cout the value of a.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="the-relations-between-pointers-and-data">The relations between
pointers and data</h2>
<ul>
<li>alter a &lt;=&gt; alter the value of *pointer.</li>
<li>The address won't be changed.</li>
</ul>
<p>ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> *pointer;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">	pointer=&amp;a;</span><br><span class="line">	cout&lt;&lt;pointer&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*pointer&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	*pointer=<span class="number">100</span>;</span><br><span class="line">	cout&lt;&lt;pointer&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*pointer&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; \n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="passbyreference-with-pointers">PassByReference with
Pointers</h2>
<p>ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cube</span><span class="params">(<span class="type">int</span> *pointer)</span></span>&#123;</span><br><span class="line">	*pointer= *pointer * *pointer * *pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> length;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;length)&#123;</span><br><span class="line">		<span class="built_in">cube</span>(&amp;length);</span><br><span class="line">		cout&lt;&lt;length&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="const-and-pointers">Const and Pointers</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>* pointer1=&amp;num; <span class="comment">//The number pointer1 points to is a const.</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> pointer2=&amp;num; <span class="comment">//pointer is a const.</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/VwXzdCt.png"
                      
                > * For pointer1: <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/WnGwjyZ.png"
                      
                > * For pointer2: <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/AsWthKE.png"
                      
                ></p>
<p>ex(For pointer1): <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span>* pointer;</span><br><span class="line">	pointer=&amp;a;</span><br><span class="line">	cout&lt;&lt;*pointer&lt;&lt;<span class="string">&quot;\n&quot;</span>;	<span class="comment">//cout 10</span></span><br><span class="line">	a=<span class="number">100</span>;</span><br><span class="line">	cout&lt;&lt;*pointer&lt;&lt;<span class="string">&quot;\n&quot;</span>;	<span class="comment">//cout 100</span></span><br><span class="line">	<span class="comment">/*pointer=100;*/</span> <span class="comment">//not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>ex(For pointer2):</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>, b=<span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span>* <span class="type">const</span> pointer=&amp;a;</span><br><span class="line">	*pointer=<span class="number">1000</span>;</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="comment">/*pointer=&amp;b*/</span> <span class="comment">//not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="pointers-and-array">Pointers and Array</h2>
<ul>
<li><p>int array and pointers <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">	<span class="type">int</span> *pointer=a;	<span class="comment">//a is the address of a[0]</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">		cout&lt;&lt;*(a+i)&lt;&lt;<span class="string">&quot; &quot;</span>; <span class="comment">//cout 0~4</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">		*(a+i)=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">		cout&lt;&lt;*(a+i)&lt;&lt;<span class="string">&quot; &quot;</span>; <span class="comment">//cout 0</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&amp;a[<span class="number">4</span>]-pointer;	<span class="comment">//4 the distance(elements) between a[4] and pointer(a[0]). = 2*sizeof(int)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p></li>
<li><p>char array and pointers <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">char</span> a[<span class="number">18</span>]=<span class="string">&quot;Helloworld&quot;</span>;</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//it won&#x27;t cout the address of a[0]</span></span><br><span class="line">	cout&lt;&lt;a+<span class="number">5</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//it will cout world</span></span><br><span class="line">	cout&lt;&lt;*(a+<span class="number">9</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//equals to a[10];</span></span><br><span class="line">	cout&lt;&lt;(<span class="type">void</span>*)a&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//it will cout the address of a[0](H)</span></span><br><span class="line">	cout&lt;&lt;(<span class="type">void</span>*)a+<span class="number">9</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//it will cout the address of a[9](d)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p></li>
<li><p>c-string and pointers</p></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/6smBRIe.png"
                      
                ></p>
<ul>
<li>sizeof()
<ul>
<li>sizeof() with array or value will return the total size in
bytes.</li>
</ul></li>
</ul>
<p>Ex1(with array):</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(arr)&lt;&lt;<span class="string">&quot;\n&quot;</span>;  <span class="comment">//cout the total size of the array(bytes)</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]); <span class="comment">//cout the total amount of elements in arr.    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>Ex2(with value):</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> a=<span class="number">10.5</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(a+b); <span class="comment">//return 8 since the result of int and double addition is still double </span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></div>
<p>Ex3(with c-string):</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> string[<span class="number">11</span>]=<span class="string">&quot;Helloworld&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>void* =&gt; a pointer for any genre of data type.
<ul>
<li>Before using it, the type of pointer must be determined.</li>
</ul></li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">void</span>* pointer;</span><br><span class="line">    pointer=&amp;a;</span><br><span class="line">    cout&lt;&lt;pointer&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//cout the address </span></span><br><span class="line">    cout&lt;&lt;*(<span class="type">int</span>*)pointer&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//cout the number a correctly</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Use pointers to print a 2d array</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_array</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> rows, <span class="type">int</span> columns)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;rows; i++)&#123;</span><br><span class="line">        a=a+i*columns;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;columns; j++)&#123;</span><br><span class="line">            cout&lt;&lt;*(a+j)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">print_array</span>(&amp;a[<span class="number">0</span>][<span class="number">0</span>], <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Pointers for 2D array</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/c4qeaq4.png"
                      
                ></p>
<ul>
<li>Pointers for 3D array</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/Q9zlaWs.png"
                      
                ></p>
<ul>
<li><p>Arrays of Pointers</p>
<ul>
<li>The array stores the address of the first character in each
c-string.</li>
</ul>
<p>Ex1:</p>
<p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> suit[ <span class="number">4</span> ] =</span><br><span class="line">&#123; <span class="string">&quot;Hearts&quot;</span>, <span class="string">&quot;Diamonds&quot;</span>,</span><br><span class="line"><span class="string">&quot;Clubs&quot;</span>, <span class="string">&quot;Spades&quot;</span> &#125;;</span><br></pre></td></tr></table></figure></div></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/V5lQGvy.png"
                      
                > Ex2:</p>
<p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> *suit[<span class="number">2</span>]=&#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>&#125;; <span class="comment">//stores the address of the first character in each string</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">sizeof</span>(suit)/<span class="number">8</span>; i++)&#123;</span><br><span class="line">        cout&lt;&lt;suit[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></div></p></li>
</ul>
<h2 id="functions-pointer">Function's Pointer</h2>
<ul>
<li>Pass the pointer of a function to another fucntion</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selection_sort</span><span class="params">(vector &lt;<span class="type">int</span>&gt; &amp;v, <span class="type">void</span> (*swap)(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b))</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>()<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;v.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v[j]&lt;v[i])&#123;</span><br><span class="line">                <span class="built_in">swap</span>(v[j], v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout&lt;&lt;v[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector &lt;<span class="type">int</span>&gt; test=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">selection_sort</span>(test, swap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="selection-sort">Selection sort</h2>
<p>Reference(How it works):https://www.geeksforgeeks.org/selection-sort/
* Easy to program but inefficient. Ex:</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_double</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">	<span class="type">double</span> temp=a;</span><br><span class="line">	a=b;</span><br><span class="line">	b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vec.<span class="built_in">size</span>()<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;vec.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[j]&lt;vec[i])&#123;</span><br><span class="line">                <span class="built_in">swap_double</span>(vec[j], vec[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; test=&#123;<span class="number">0</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(test);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;test.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout&lt;&lt;test[i]&lt;&lt;<span class="string">&quot; &quot;</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to C++ Programing</title>
    <url>/2023/01/18/Chapter%202,%20Introduction%20to%20C++%20Programing/</url>
    <content><![CDATA[<h1 id="chapter-2-introduction-to-c-programing">Chapter 2, Introduction
to C++ Programing</h1>
<h2 id="the-sturcture-of-basic-c-program">The Sturcture of Basic C++
Program</h2>
<ul>
<li>The lines start with # are processed by the preprocessor.</li>
<li>&lt;iostream&gt; is the input/output stream header file.</li>
<li>The int main() means that the main program will return an integar
value.</li>
<li>std::cout specifies that we are using namspace std. ## The Use of
Escape Sequence <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/G8kcne8.png"
                      
                > ## The
Declaration of Variables</li>
<li>void -&gt; Function does not return a value.</li>
<li>int -&gt; Declare integar variables.</li>
<li>char -&gt; Declare character variables.
<ul>
<li>char can also be stored as integer.</li>
</ul></li>
<li>float -&gt; Declare floating-point variables.</li>
<li>double -&gt; Declare double-precision variables.</li>
<li>bool -&gt; To hold a boolean value, true/false. ## Arithmetic
Operators <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/IhflKJP.png"
                      
                ></li>
<li>The rules of operator precedence as generally same as those in
algebra.</li>
<li>Exponentiation -&gt; Import &lt;math.h&gt; ## Equality and
Relational Operators <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/rmHds4R.png"
                      
                ></li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to C++ Programing</title>
    <url>/2023/01/18/Chaper%208%20Sequential-Access%20Files/</url>
    <content><![CDATA[<h1 id="chaper-8-sequential-access-files">Chaper 8 Sequential-Access
Files</h1>
<h2 id="fstream">fstream</h2>
<ul>
<li>ofstream and ifstream is include in fstream
<ul>
<li>ofstream: creats and writes files</li>
<li>ifstream: reads from files</li>
</ul></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/BXqxxcS.png"
                      
                > Ex1(Input data to txt):
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fstream file;</span><br><span class="line">    file.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line">    string name, birthday;</span><br><span class="line">    <span class="keyword">if</span>(!file)&#123;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;File could not be open.&quot;</span>&lt;&lt;endl; </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);    <span class="comment">//exit with error</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Input the name and birthday(input end-of-file to end the program):&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;name&gt;&gt;birthday)&#123;</span><br><span class="line">        outClientFile&lt;&lt;name&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;birthday&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Input the name and birthday(input end-of-file to end the program):&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    outClientFile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> Ex2(Read from txt): <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">fstream <span class="title">file</span><span class="params">(<span class="string">&quot;test.txt&quot;</span>, ios::in)</span></span>;</span><br><span class="line">    string name, birthday;</span><br><span class="line">    <span class="keyword">if</span>(!file)&#123;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;The file cannot be opened.&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(file&gt;&gt;name&gt;&gt;birthday)&#123;</span><br><span class="line">        cout&lt;&lt;name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;birthday&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    outClientFile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> * Reading from a
specific line(seekg(), seekp())
Reference:　http://c.biancheng.net/view/1541.html</p>
<pre><code>* name.seekg(0); =&gt; reposition the pointer to location 0.
* To read a sequential file again, we need to add name.clear() before the seekg.</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/8Ourtup.png"
                      
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/QbXSudS.png"
                      
                > * Telling you the
current location(tellg(), tellp())</p>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Control Statement-Part 2</title>
    <url>/2023/01/18/Chapter%204,%20Control%20Statement_%20Part%202/</url>
    <content><![CDATA[<h1 id="chapter-4-control-statement-part-2">Chapter 4, Control
Statement: Part 2</h1>
<h2 id="do...while">do...while</h2>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>;(condition)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>do...while always check the continuation after the code inside the
{} has been excecuted. Therefore, it will execute at least one time.
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/OQEIHFE.png"
                      
                > ## switch case
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> constant1:</span><br><span class="line">        <span class="comment">//execute while expression is constant1;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> constant2:</span><br><span class="line">        <span class="comment">//execute while expression is constant2;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">        <span class="comment">//execute while expression is F or f;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>+<span class="number">2</span>:</span><br><span class="line">        <span class="comment">//not allowed</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>+<span class="number">4</span>:</span><br><span class="line">        <span class="comment">//not allowed</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//code to be executed if expression doesn&#x27;t</span></span><br><span class="line">        <span class="comment">// match any constant</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>Perform many different actions based on the value of expression.
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/ygwibqG.png"
                      
                ></li>
</ul>
<h2 id="setw">setw()</h2>
<p><em>　setw() =&gt; print spaces to make it tidy. <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/rY3G69w.png"
                      
                > ## EOF </em> EOF =&gt; End of
file by entering ctrl+z. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">cin&gt;&gt;sth;</span><br><span class="line"><span class="keyword">while</span>(cin.<span class="built_in">get</span>()!=EOF)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## cin.get() vs cin&gt;&gt; *
cin.get() -&gt; only read one character. * cin -&gt; depends on
&gt;&gt;. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> grade, aC&#123;<span class="number">0</span>&#125;, bC&#123;<span class="number">0</span>&#125;, cC&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>((grade=std::cin.<span class="built_in">get</span>())!=EOF)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(grade)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            aC++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            bC++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">            cC++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt;aC&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;bC&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;cC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## C++ Modified Data Types <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/tTgVBZW.png"
                      
                > ## Continue vs Break * Continue
-&gt; Only skip a specific process. * Break -&gt; Skip the whole
process. ## Boolalpha <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">std::cout&lt;&lt;<span class="literal">true</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout&lt;&lt;std::boolalpha;</span><br><span class="line">std::cout&lt;&lt;<span class="literal">true</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//The result will be 1 and true.</span></span><br></pre></td></tr></table></figure></div> ## Operator's Precedence <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/MyvXHDH.png"
                      
                > * The right side of the
&amp;&amp; will only be considered if the left side is true. * The
&amp;&amp; operator has a higher precedence than ||; * Any nonezero
value is interpreted as ture. Which means if(a=5){...} will be true.</p>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Control Statement-Part 1</title>
    <url>/2023/01/18/Chapter%203,%20Control%20Statement_%20Part%201/</url>
    <content><![CDATA[<h1 id="chapter-3-control-statement-part-1">Chapter 3, Control
Statement: Part 1</h1>
<h2 id="control-structure">Control Structure</h2>
<ul>
<li>The sequence structure</li>
<li>The selection strcture</li>
<li>The repetition structure ## Selection Statements</li>
<li>To choose among courses of action.</li>
<li>if: A single-selection statement</li>
<li>if...else: A double-selection statement</li>
<li>switch: A multiselection statement ### Conditional
Operators(?:)</li>
<li>Closely related to the if..else function.</li>
<li>Ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x&#123;<span class="number">0</span>&#125;, y&#123;<span class="number">1</span>&#125;;</span><br><span class="line">    result=x&lt;y?<span class="string">&quot;x&lt;y&quot;</span>:<span class="string">&quot;x&gt;y&quot;</span>;</span><br><span class="line">    std::cout&lt;&lt;result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> Accodring to the code, it will cout x<span
class="math inline">\(&lt;\)</span>y in the command prompt.</li>
<li>Another way to declare integers: int x{0} equals to int x=0 ##
Repetition Statements(Looping Statements)</li>
<li>while: do the action zero or more times.</li>
<li>do...while: do the action at least once.</li>
<li>for: do the action zero or more times. ### Counter Controlled
Repetition</li>
<li>Counter variables are normally initialized to zero or one, depending
on their use.</li>
<li>Remember to initialize the counter varible, or it might contain some
garbage variable. ## How to change the tpye of a object <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">static_cast</span>&lt;type&gt;(object);</span><br><span class="line">    (type)object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ##
setprecision() <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;std::<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;floatnum; <span class="comment">//start from the first num after fixed point</span></span><br><span class="line">    std::cout&lt;&lt;fixed::std::<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;floatnum; <span class="comment">//start from the first num before fixed point</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Common Keywords in C++ and C <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/qm5wD9b.png"
                      
                > ## Assignment Operators <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/JHI93gS.png"
                      
                > ## Preincrement and
Postincrement</li>
<li>Preincrement =&gt; Increment a by 1, then use the new value of a in
the expression in which a resides.</li>
<li>Postincrement =&gt; Use the current value of a in the expression in
which a resides, then increment a by 1. Ex:</li>
</ul>
<pre class="c++="><code>#include &lt;iostream&gt;
int main()&#123;
    int a=1;
    std::cout&lt;&lt;a&lt;&lt;&quot;\n&quot;;
    std::cout&lt;&lt;a++&lt;&lt;&quot;\n&quot;; //do a=a+1 after cout
    std::cout&lt;&lt;a&lt;&lt;&quot;\n&quot;;

    int b=1;
    std::cout&lt;&lt;b&lt;&lt;&quot;\n&quot;;
    std::cout&lt;&lt;++b&lt;&lt;&quot;\n&quot;; //do b=b+1 before cout
    std::cout&lt;&lt;b&lt;&lt;&quot;\n&quot;;
&#125;</code></pre>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Functions and Introduction to Recursion</title>
    <url>/2023/01/18/Chapter%205%20Functions%20and%20Introduction%20to%20Recursion/</url>
    <content><![CDATA[<h1 id="chapter-5-functions-and-introduction-to-recursion">Chapter 5
Functions and Introduction to Recursion</h1>
<h2 id="cmath">Cmath</h2>
<p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br></pre></td></tr></table></figure></div> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/wRjFGr7.png"
                      
                > <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/QFZhdi3.png"
                      
                > ## Defining Our Own Fucntion *
Exapmple(square function) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span>)</span></span>; <span class="comment">//function prototype declaration</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...sth</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y*y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> * We can define a function with
default value. * Default value must be the rightmost in a function’s
parameter list.</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> y=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">square</span>(); <span class="comment">//cout 1</span></span><br><span class="line">    <span class="built_in">square</span>(<span class="number">2</span>); <span class="comment">//cout 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="void">void</h2>
<ul>
<li>Used when defining a function that doesn't return a value.
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;x*x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Standard Library Header Files <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/QO6ThdF.png"
                      
                > <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/JFYKrW9.png"
                      
                > <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/JBLkhgH.png"
                      
                > <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/ROPhZnW.png"
                      
                > ## Random Number <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="built_in">rand</span>()</span><br></pre></td></tr></table></figure></div>
## Time Function <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">time</span>();/How many seconds has passed since <span class="number">1970.1</span><span class="number">.1</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure></div> ## Why is rand() not that random?</li>
<li>You have to set random seed. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> seed&#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin&gt;&gt;seed; <span class="comment">//input a random number.</span></span><br><span class="line"><span class="built_in">srand</span>(seed);</span><br></pre></td></tr></table></figure></div> <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>());</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div> ##
Enumerate</li>
<li>If i set win=1, lost will be 2, continue will be 3.</li>
<li>win{1} is not allowed, only win=1 will work. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Game_Status</span>&#123;WIN, LOST, CONTINUE&#125;; </span><br><span class="line"><span class="comment">//win=0, lost=1, continue=2.</span></span><br></pre></td></tr></table></figure></div> ## static
using with local variables</li>
<li>You can see it as a way to make local variable to become a global
variable.</li>
<li>It will only be initialized one time! <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> x=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div> <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Example code</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">static_num</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    x++;</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">static_num</span>();</span><br><span class="line">    <span class="built_in">static_num</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
## static using with global variables</li>
<li>The variable used with static is only accessible for the specific
file. ## extern</li>
<li>Get a variable from another file. Ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//file_1</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div> <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//file_2</span></span><br><span class="line"><span class="keyword">extern</span> a;</span><br></pre></td></tr></table></figure></div>
## inline</li>
<li>The cost of defining a function is too big，inline will decrease the
cost.</li>
<li>The concept of inline is expansion</li>
<li>inline can only be used when doing simple calculation.
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">cube</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">cube</span>(x); <span class="comment">//cube(x)=x*x*x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Pass by reference.</li>
<li>It will affect the original value of a variable.</li>
<li>Adding a '&amp;' in front of a variable, with '&amp;' the function
will directly put the variable (num) into the function.</li>
<li>It won't use extra ram space to store a number. (int a=1; int b=a;
will use extra ram space)</li>
<li>The concept is like domain. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">function</span><span class="params">(<span class="type">int</span> &amp;number)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cube</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    x=x*x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    <span class="built_in">cube</span>(num);</span><br><span class="line">    cout&lt;&lt;num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Acces
to a global variable <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">5</span>;</span><br><span class="line">    std::cout&lt;&lt;::x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Function overloading</li>
<li>C++ enables several functions of the same name to be defined, as
long as they have different signatures.</li>
<li>The compiler will automatically choose the proper function to
execute. Depending on the data type or the amount of the parameter
list<br />
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;x*x&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">square</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;x*x&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">square</span>(<span class="number">1</span>); <span class="comment">//cout 1</span></span><br><span class="line">    <span class="built_in">square</span>(<span class="number">1.1</span>); <span class="comment">//cout 1.21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Making and using your own library</li>
<li>Example: Finding max of three numbers.</li>
<li>.h template</li>
<li>template &lt;class T&gt; means that every type of data can use this
function.</li>
<li>The way to decalre a template function is the same as normal
function. <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function">T <span class="title">maximum</span><span class="params">(T value1, T Value2, T Value3)</span></span>&#123;</span><br><span class="line">    T maximumValue =value1;</span><br><span class="line">    <span class="keyword">if</span>(Value2&gt;maximumValue)&#123;</span><br><span class="line">        maximumValue=Value2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Value3&gt;maximumValue)&#123;</span><br><span class="line">        maximumValue=Value3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maximumValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>main program <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;maximum.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">    <span class="keyword">while</span>(std::cin&gt;&gt;x&gt;&gt;y&gt;&gt;z)&#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Max= &quot;</span>&lt;&lt;<span class="built_in">maximum</span>(x, y, z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Recursion</li>
<li>A function calling oneself.</li>
<li>Example of factorial of a nonnegative function with recursion.
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="title">factorial</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num*<span class="built_in">factorial</span>(num<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>Example of Fibonacci Series <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="title">fib</span><span class="params">(usigned <span class="type">long</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">1</span>||num==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fib</span>(num<span class="number">-1</span>)+<span class="built_in">fib</span>(num<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>STL(Standard Template Library)</title>
    <url>/2023/01/18/STL(Standard%20Template%20Library)/</url>
    <content><![CDATA[<h1 id="stlstandard-template-library">STL(Standard Template
Library)</h1>
<h2 id="vector">Vector</h2>
<ul>
<li>用法基本跟array一樣，可以把它想成動態陣列。</li>
<li>宣告時可以不用確定大小</li>
<li>宣告一向量時，所有範圍內的值會被初始成0。</li>
<li>可以使用'=='比較兩向量時</li>
<li>使用'='時，會將一向量的值賦予到另一向量。</li>
<li>vector<int> v2(v1);=&gt;複製v1到v2。</li>
<li>集合尾端增刪元素很快 : O(1)</li>
<li>集合中間增刪元素比較費時 : O(n)</li>
<li>erase(a, b); =&gt; 刪除 <span
class="math inline">\([a,b)\)</span>.</li>
<li>begin()=&gt;第一個元素</li>
<li>end()=&gt;最後一個元素的下一個(沒有值)</li>
<li>erase(v.begin(), v.end()) =&gt; erase every elements.</li>
<li>pop_back()只會將vector的大小做修改，但值還是會存在原本的位置。</li>
<li>vector[100]=vector<span class="math inline">\(.\)</span>at(100);
<ul>
<li>使用"[]"並不會在超過向量大小時顯示錯誤。</li>
<li>使用".at()"會在超過向量大小時顯示錯誤。</li>
</ul></li>
</ul>
<p>用法1(push_back and pop_back): <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec; <span class="comment">//declaration of vector</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">		vec.<span class="built_in">push_back</span>(i);	<span class="comment">//push_back to put elements into vector</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">		cout&lt;&lt;vec[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;	<span class="comment">//cout each element</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">		vec.<span class="built_in">pop_back</span>();	<span class="comment">//pop_back to remove the last element from the vector</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> 用法二(insert and erase)
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">else</span> vec.<span class="built_in">push_back</span>(i+<span class="number">1</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vec.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		cout&lt;&lt;vec[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;				<span class="comment">//cout 1 3</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>()+<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vec.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		cout&lt;&lt;vec[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;				<span class="comment">//cout 1 2 3</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vec.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		cout&lt;&lt;vec[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;				<span class="comment">//cout 1 3</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> 用法三(empty(), size(), resize(), capacity(), reserve())
Reference:https://stackoverflow.com/questions/7397768/choice-between-vectorresize-and-vectorreserve
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">	<span class="keyword">if</span>(vec.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		cout&lt;&lt;boolalpha&lt;&lt;vec.<span class="built_in">empty</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;size of vector &quot;</span>&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	vec.<span class="built_in">resize</span>(<span class="number">3</span>);		</span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;		<span class="comment">//current size</span></span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">capacity</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;		<span class="comment">//current maximum capacity</span></span><br><span class="line">	vec.<span class="built_in">reserve</span>(<span class="number">4</span>);		</span><br><span class="line">	cout&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;vec.<span class="built_in">capacity</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> * capacity and size * 容量 (capacity) : 是這個 vector
擁有的空間。 * 長度 (size) : 是實際儲存了元素的空間大小。capacity
永遠不小於 size。 * reserve() vs resize() * reserve()
的目的是擴大容量。做完時，vector 的長度不變，capacity
只會長大不會縮小，資料所在位置可能會移動 (因為會重配空間)。因為 vector
一開始是空的，立刻預留顯然比填了資料後才預留省了拷貝資料的時間。 *
resize() 的目的是改變 vector 的長度。做完時，vector
的長度會改變為指定的大小，capacity 則視需要調整，確保不小於
size，資料所在位置可能會移動。如果變小就擦掉尾巴的資料，如果變大就補零。補零如果會超過容量，會做重配空間的動作。
*
白話文就是reserve()創造空間，但沒有隨機產生值，因此不能做訪問。resize()則是除了創造空間，也隨機產生值，故可直接訪問。
* 二維vector *將眾多一維vector塞入二維vector。 <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; test_2D;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> counter=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</span><br><span class="line">            temp.<span class="built_in">push_back</span>(counter);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        test_2D.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;test_2D.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;test_2D[<span class="number">0</span>].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            cout&lt;&lt;test_2D[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> Result:
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/8mMfbp6.png"
                      
                ></p>
<h2 id="queue">Queue</h2>
<ul>
<li>僅能取得(操作)頭與尾的element.</li>
<li>具有fifo(first in first out)的特性.</li>
<li>用法1(push(), pop(), front(), back(), size(), empty()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(i+<span class="number">1</span>);	<span class="comment">//adding elements</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Size: &quot;</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;First element: &quot;</span>&lt;&lt;q.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Last element: &quot;</span>&lt;&lt;q.<span class="built_in">back</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">		q.<span class="built_in">pop</span>();		<span class="comment">//remove the first element</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		cout&lt;&lt;boolalpha&lt;&lt;q.<span class="built_in">empty</span>(); <span class="comment">//return 1 if q is empty</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
## Stack</li>
<li>僅能取得(操作)最上層的element.</li>
<li>具有lifo(last in first out)的特性.</li>
</ul>
<p>用法1(psuh(), pop(), top(), size(), empty()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">		s.<span class="built_in">push</span>(i+<span class="number">1</span>);    <span class="comment">//not reference</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Size: &quot;</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;The top stack: &quot;</span>&lt;&lt;s.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//reference</span></span><br><span class="line">	s.<span class="built_in">pop</span>();	<span class="comment">//removing the first stack</span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Size:&quot;</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; s.<span class="built_in">size</span>()!=<span class="number">0</span>; i++)&#123;</span><br><span class="line">		s.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;size: &quot;</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span>(s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;empty&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Set *
就是集合。 * 可用於快速查找elements 是否存在。 *
每個elements皆是唯一的，不可重複。 * 每個elements皆不能做修改。 *
具有順序性。 * 操作簡單。 * elements 太多會拖慢速度。 <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/1mdMgul.png"
                      
                ></p>
<p>用法1(insert(), count(), erase(), clear(), empty()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">10</span>;i&lt;=<span class="number">50</span>; i+=<span class="number">10</span>)&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">count</span>(<span class="number">10</span>))&#123;</span><br><span class="line">        cout&lt;&lt;boolalpha&lt;&lt;<span class="literal">true</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">erase</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">count</span>(<span class="number">10</span>))&#123;</span><br><span class="line">        cout&lt;&lt;boolalpha&lt;&lt;<span class="literal">true</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;boolalpha&lt;&lt;<span class="literal">false</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;empty&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="map">Map</h2>
<ul>
<li>有排序關聯式容器。</li>
<li>map中的元素會根據對應的鍵值(key)做排序。</li>
<li>鍵值具有唯一性。</li>
<li>高效率，使用簡單。 <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/anN3pMV.png"
                      
                ></li>
</ul>
<p>用法1(insert(), erase(), clear(), empty()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//initialization</span></span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; m =&#123;</span><br><span class="line">        &#123;<span class="string">&quot;One&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Two&quot;</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Three&quot;</span>, <span class="number">3</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;Four&quot;</span>, <span class="number">4</span>));</span><br><span class="line">    m[<span class="string">&quot;Five&quot;</span>]=<span class="number">5</span>;</span><br><span class="line">    cout&lt;&lt;m[<span class="string">&quot;Five&quot;</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    m.<span class="built_in">erase</span>(<span class="string">&quot;Five&quot;</span>);</span><br><span class="line">    cout&lt;&lt;m.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    m.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">if</span>(m.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;empty&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> ## Algorithm
* 常用演算法。</p>
<p>用法1(sort(), reverse()) <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;input&amp;&amp;input!=<span class="number">-1</span>)&#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout&lt;&lt;v[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout&lt;&lt;v[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>自我介紹</title>
    <url>/2023/01/17/%E8%87%AA%E6%88%91%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h3
id="大家好我是itzlanjiao目前就讀彰化師範大學電子工程學系大一本網站的目的是為了對大學四年的課堂內容及個人手做小專題做些紀錄及分享歡迎你的到來">大家好，我是ItzLanJiao，目前就讀彰化師範大學電子工程學系大一，本網站的目的是為了對大學四年的課堂內容及個人手做小專題做些紀錄及分享，歡迎你的到來!</h3>
]]></content>
      <tags>
        <tag>Introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>補充資料</title>
    <url>/2023/01/18/%E8%A3%9C%E5%85%85%E8%B3%87%E6%96%99/</url>
    <content><![CDATA[<h1 id="補充資料">補充資料</h1>
<h2 id="literal-constant">Literal Constant</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/s7Ps4NN.png"
                      
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/QjOdk1K.png"
                      
                ></p>
<p>Ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="number">75</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">0113</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">0x4b</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//Decimal, Octal, Hexadecimal</span></span><br><span class="line">	cout&lt;&lt;<span class="number">75</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">75u</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">75l</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">75ul</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">75lu</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//int, unsigned, unsigned long, usigned long</span></span><br><span class="line">	cout&lt;&lt;<span class="number">6.02e23</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">1.6e-19</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//6.02*10^23</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="bitwise-operators">Bitwise Operators</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/7AphOD4.png"
                      
                ></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0b00000001</span>;</span><br><span class="line">	<span class="type">int</span> y=<span class="number">0b00000000</span>;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x&lt;&lt;<span class="number">1</span>)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">//left / right shift for 1 bit </span></span><br><span class="line">	cout&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(~x)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x|y)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x&amp;y)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x^y)&lt;&lt;<span class="string">&quot;\n&quot;</span>; <span class="comment">// not, or, and, xor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="dynamic-memory-allocation">Dynamic Memory allocation</h2>
<p>Reference: http://ccy.dd.ncu.edu.tw/~chen/course/Cpp/ch5/6.htm <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/kxplKpS.png"
                      
                ></p>
<p>Ex: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> *p;</span><br><span class="line">	p=<span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">	*p=<span class="number">100</span>;</span><br><span class="line">	cout&lt;&lt;*p;</span><br><span class="line">	<span class="keyword">delete</span> p; <span class="comment">//release the memory space</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> Ex2: <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> *p=<span class="keyword">new</span> <span class="type">int</span> [<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">		*(p+i)=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">		cout&lt;&lt;*(p+i)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span> []p; <span class="comment">//release memory space</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="linked-list寒假學">Linked List(寒假學)</h2>
]]></content>
      <categories>
        <category>大學課堂筆記-程式設計</category>
        <category>C++</category>
        <category>彰師大</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
